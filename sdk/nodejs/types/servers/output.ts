// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export interface ScalewayInstanceV1Bootscript {
    /**
     * The bootscript arch
     */
    arch?: enums.servers.ScalewayInstanceV1BootscriptArch;
    /**
     * The bootscript arguments
     */
    bootcmdargs?: string;
    /**
     * Dispmay if the bootscript is the default bootscript if no other boot option is configured
     */
    default?: boolean;
    /**
     * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
     */
    dtb?: string;
    /**
     * The bootscript ID
     */
    id?: string;
    /**
     * The initrd (initial ramdisk) configuration
     */
    initrd?: string;
    /**
     * The server kernel version
     */
    kernel?: string;
    /**
     * The bootscript organization ID
     */
    organization?: string;
    /**
     * The bootscript project ID
     */
    project?: string;
    /**
     * Provide information if the bootscript is public
     */
    public?: boolean;
    /**
     * The bootscript title
     */
    title?: string;
    /**
     * The zone in which is the bootscript
     */
    zone?: string;
}
/**
 * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
 */
export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
    };
}

export interface ScalewayInstanceV1GetPlacementGroupServersResponse {
    servers?: outputs.servers.ScalewayInstanceV1PlacementGroupServer[];
}

export interface ScalewayInstanceV1GetServerResponse {
    server?: outputs.servers.ScalewayInstanceV1Server;
}
/**
 * scalewayInstanceV1GetServerResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetServerResponse
 */
export function scalewayInstanceV1GetServerResponseProvideDefaults(val: ScalewayInstanceV1GetServerResponse): ScalewayInstanceV1GetServerResponse {
    return {
        ...val,
        server: (val.server ? outputs.servers.scalewayInstanceV1ServerProvideDefaults(val.server) : undefined),
    };
}

export interface ScalewayInstanceV1Image {
    arch?: enums.servers.ScalewayInstanceV1ImageArch;
    /**
     * (RFC 3339 format)
     */
    creation_date?: string;
    default_bootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
    extra_volumes?: {[key: string]: outputs.servers.ScalewayInstanceV1Volume};
    from_server?: string;
    id?: string;
    /**
     * (RFC 3339 format)
     */
    modification_date?: string;
    name: string;
    organization?: string;
    project: string;
    public?: boolean;
    root_volume: outputs.servers.ScalewayInstanceV1VolumeSummary;
    state?: enums.servers.ScalewayInstanceV1ImageState;
    tags?: string[];
    zone?: string;
}
/**
 * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
 */
export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
        default_bootscript: (val.default_bootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.default_bootscript) : undefined),
        root_volume: outputs.servers.scalewayInstanceV1VolumeSummaryProvideDefaults(val.root_volume),
        state: (val.state) ?? "available",
    };
}

export interface ScalewayInstanceV1ListServersResponse {
    /**
     * List of servers
     */
    servers?: outputs.servers.ScalewayInstanceV1Server[];
}

export interface ScalewayInstanceV1ListServersTypesResponse {
    /**
     * List of server types
     */
    servers?: {[key: string]: outputs.servers.ScalewayInstanceV1ServerType};
}

export interface ScalewayInstanceV1PlacementGroup {
    id?: string;
    /**
     * The placement group name
     */
    name: string;
    /**
     * The placement group organization ID
     */
    organization?: string;
    policy_mode?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyMode;
    /**
     * Returns true if the policy is respected, false otherwise
     */
    policy_respected?: boolean;
    policy_type?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyType;
    /**
     * The placement group project ID
     */
    project: string;
    /**
     * The placement group tags
     */
    tags?: string[];
    /**
     * The zone in which is the placement group
     */
    zone?: string;
}
/**
 * scalewayInstanceV1PlacementGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PlacementGroup
 */
export function scalewayInstanceV1PlacementGroupProvideDefaults(val: ScalewayInstanceV1PlacementGroup): ScalewayInstanceV1PlacementGroup {
    return {
        ...val,
        policy_mode: (val.policy_mode) ?? "optional",
        policy_type: (val.policy_type) ?? "max_availability",
    };
}

export interface ScalewayInstanceV1PlacementGroupServer {
    id?: string;
    name?: string;
    policy_respected?: boolean;
}

export interface ScalewayInstanceV1PrivateNIC {
    /**
     * The private NIC unique ID
     */
    id?: string;
    /**
     * The private NIC MAC address
     */
    mac_address?: string;
    /**
     * The private network where the private NIC is attached
     */
    private_network_id?: string;
    /**
     * The server the private NIC is attached to
     */
    server_id?: string;
    /**
     * The private NIC state
     */
    state?: enums.servers.ScalewayInstanceV1PrivateNICState;
}
/**
 * scalewayInstanceV1PrivateNICProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PrivateNIC
 */
export function scalewayInstanceV1PrivateNICProvideDefaults(val: ScalewayInstanceV1PrivateNIC): ScalewayInstanceV1PrivateNIC {
    return {
        ...val,
        state: (val.state) ?? "available",
    };
}

export interface ScalewayInstanceV1Server {
    /**
     * Provide as list of allowed actions on the server
     */
    allowed_actions?: enums.servers.ScalewayInstanceV1ServerAllowedActionsItem[];
    /**
     * The server arch
     */
    arch?: enums.servers.ScalewayInstanceV1ServerArch;
    boot_type?: enums.servers.ScalewayInstanceV1ServerBootType;
    bootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
    /**
     * The server commercial type (eg. GP1-M)
     */
    commercial_type?: string;
    /**
     * The server creation date (RFC 3339 format)
     */
    creation_date?: string;
    /**
     * True if a dynamic IP is required
     */
    dynamic_ip_required?: boolean;
    /**
     * True if IPv6 is enabled
     */
    enable_ipv6?: boolean;
    /**
     * The server host name
     */
    hostname?: string;
    /**
     * The server unique ID
     */
    id?: string;
    image?: outputs.servers.ScalewayInstanceV1Image;
    /**
     * The server IPv6 address
     */
    ipv6?: outputs.servers.ScalewayInstanceV1ServerIpv6Properties;
    /**
     * The server location
     */
    location?: outputs.servers.ScalewayInstanceV1ServerLocationProperties;
    /**
     * The server planned maintenances
     */
    maintenances?: outputs.servers.ScalewayInstanceV1ServerMaintenance[];
    /**
     * The server modification date (RFC 3339 format)
     */
    modification_date?: string;
    /**
     * The server name
     */
    name?: string;
    /**
     * The server organization ID
     */
    organization?: string;
    placement_group?: outputs.servers.ScalewayInstanceV1PlacementGroup;
    /**
     * The server private IP address
     */
    private_ip?: string;
    /**
     * The server private NICs
     */
    private_nics?: outputs.servers.ScalewayInstanceV1PrivateNIC[];
    /**
     * The server project ID
     */
    project?: string;
    /**
     * The server protection option is activated
     */
    protected?: boolean;
    /**
     * Information about the public IP
     */
    public_ip?: outputs.servers.ScalewayInstanceV1ServerPublicIpProperties;
    /**
     * The server security group
     */
    security_group?: outputs.servers.ScalewayInstanceV1ServerSecurityGroupProperties;
    /**
     * The server state
     */
    state?: enums.servers.ScalewayInstanceV1ServerState;
    /**
     * The server state_detail
     */
    state_detail?: string;
    /**
     * The server associated tags
     */
    tags?: string[];
    /**
     * The server volumes
     */
    volumes?: {[key: string]: outputs.servers.ScalewayInstanceV1VolumeServer};
    /**
     * The zone in which is the server
     */
    zone?: string;
}
/**
 * scalewayInstanceV1ServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Server
 */
export function scalewayInstanceV1ServerProvideDefaults(val: ScalewayInstanceV1Server): ScalewayInstanceV1Server {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
        boot_type: (val.boot_type) ?? "local",
        bootscript: (val.bootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.bootscript) : undefined),
        image: (val.image ? outputs.servers.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
        placement_group: (val.placement_group ? outputs.servers.scalewayInstanceV1PlacementGroupProvideDefaults(val.placement_group) : undefined),
        state: (val.state) ?? "running",
    };
}

/**
 * The server IPv6 address
 */
export interface ScalewayInstanceV1ServerIpv6Properties {
    /**
     * The server IPv6 IP-Address (IPv6 address)
     */
    address?: string;
    /**
     * The IPv6 IP-addresses gateway (IPv6 address)
     */
    gateway?: string;
    /**
     * The IPv6 IP-addresses CIDR netmask
     */
    netmask?: string;
}

/**
 * The server location
 */
export interface ScalewayInstanceV1ServerLocationProperties {
    cluster_id?: string;
    hypervisor_id?: string;
    node_id?: string;
    platform_id?: string;
    zone_id?: string;
}

export interface ScalewayInstanceV1ServerMaintenance {
}

/**
 * Information about the public IP
 */
export interface ScalewayInstanceV1ServerPublicIpProperties {
    /**
     * The server public IPv4 IP-Address (IPv4 address)
     */
    address?: string;
    /**
     * True if the IP address is dynamic
     */
    dynamic?: boolean;
    /**
     * The unique ID of the IP address
     */
    id?: string;
}

/**
 * The server security group
 */
export interface ScalewayInstanceV1ServerSecurityGroupProperties {
    id?: string;
    name?: string;
}

export interface ScalewayInstanceV1ServerSummary {
    id?: string;
    name?: string;
}

export interface ScalewayInstanceV1ServerType {
    /**
     * Alternative instance name if any
     */
    alt_names?: string[];
    /**
     * CPU architecture
     */
    arch?: enums.servers.ScalewayInstanceV1ServerTypeArch;
    /**
     * True if it is a baremetal instance
     */
    baremetal?: boolean;
    /**
     * Capabilities
     */
    capabilities?: outputs.servers.ScalewayInstanceV1ServerTypeCapabilitiesProperties;
    /**
     * Number of GPU
     */
    gpu?: number;
    /**
     * Hourly price in Euro
     */
    hourly_price?: number;
    /**
     * Estimated monthly price, for a 30 days month, in Euro
     */
    monthly_price?: number;
    /**
     * Number of CPU
     */
    ncpus?: number;
    /**
     * Network available for the instance
     */
    network?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkProperties;
    /**
     * Additional volume constraints
     */
    per_volume_constraint?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintProperties;
    /**
     * Available RAM in bytes
     */
    ram?: number;
    /**
     * Initial volume constraints
     */
    volumes_constraint?: outputs.servers.ScalewayInstanceV1ServerTypeVolumesConstraintProperties;
}
/**
 * scalewayInstanceV1ServerTypeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1ServerType
 */
export function scalewayInstanceV1ServerTypeProvideDefaults(val: ScalewayInstanceV1ServerType): ScalewayInstanceV1ServerType {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
    };
}

/**
 * Capabilities
 */
export interface ScalewayInstanceV1ServerTypeCapabilitiesProperties {
    /**
     * True if server supports block storage
     */
    block_storage?: boolean;
    /**
     * List of supported boot types
     */
    boot_types?: enums.servers.ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem[];
}

export interface ScalewayInstanceV1ServerTypeNetworkInterface {
    /**
     * Maximum internal bandwidth in bits per seconds
     */
    internal_bandwidth?: number;
    /**
     * Maximum internet bandwidth in bits per seconds
     */
    internet_bandwidth?: number;
}

/**
 * Network available for the instance
 */
export interface ScalewayInstanceV1ServerTypeNetworkProperties {
    /**
     * List of available network interfaces
     */
    interfaces?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkInterface[];
    /**
     * True if IPv6 is enabled
     */
    ipv6_support?: boolean;
    /**
     * Total maximum internal bandwidth in bits per seconds
     */
    sum_internal_bandwidth?: number;
    /**
     * Total maximum internet bandwidth in bits per seconds
     */
    sum_internet_bandwidth?: number;
}

/**
 * Additional volume constraints
 */
export interface ScalewayInstanceV1ServerTypePerVolumeConstraintProperties {
    /**
     * Local SSD volumes
     */
    l_ssd?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties;
}

/**
 * Local SSD volumes
 */
export interface ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties {
    /**
     * Maximum volume size in bytes (in bytes)
     */
    max_size?: number;
    /**
     * Minimum volume size in bytes (in bytes)
     */
    min_size?: number;
}

/**
 * Initial volume constraints
 */
export interface ScalewayInstanceV1ServerTypeVolumesConstraintProperties {
    /**
     * Maximum volume size in bytes (in bytes)
     */
    max_size?: number;
    /**
     * Minimum volume size in bytes (in bytes)
     */
    min_size?: number;
}

export interface ScalewayInstanceV1Volume {
    /**
     * The volume creation date (RFC 3339 format)
     */
    creation_date?: string;
    /**
     * Show the volume NBD export URI
     */
    export_uri?: string;
    id?: string;
    /**
     * The volume modification date (RFC 3339 format)
     */
    modification_date?: string;
    /**
     * The volume name
     */
    name: string;
    /**
     * The volume organization ID
     */
    organization?: string;
    /**
     * The volume project ID
     */
    project: string;
    /**
     * The server attached to the volume
     */
    server?: outputs.servers.ScalewayInstanceV1VolumeServerProperties;
    /**
     * The volume disk size (in bytes)
     */
    size?: number;
    state?: enums.servers.ScalewayInstanceV1VolumeState;
    /**
     * The volume tags
     */
    tags?: string[];
    volume_type?: enums.servers.ScalewayInstanceV1VolumeVolumeType;
    /**
     * The zone in which is the volume
     */
    zone?: string;
}
/**
 * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
 */
export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
    return {
        ...val,
        state: (val.state) ?? "available",
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

export interface ScalewayInstanceV1VolumeServer {
    boot?: boolean;
    /**
     * (RFC 3339 format)
     */
    creation_date?: string;
    export_uri?: string;
    id?: string;
    /**
     * (RFC 3339 format)
     */
    modification_date?: string;
    name?: string;
    organization?: string;
    project?: string;
    server?: outputs.servers.ScalewayInstanceV1ServerSummary;
    /**
     * (in bytes)
     */
    size?: number;
    state?: enums.servers.ScalewayInstanceV1VolumeServerState;
    volume_type?: enums.servers.ScalewayInstanceV1VolumeServerVolumeType;
    zone?: string;
}
/**
 * scalewayInstanceV1VolumeServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServer
 */
export function scalewayInstanceV1VolumeServerProvideDefaults(val: ScalewayInstanceV1VolumeServer): ScalewayInstanceV1VolumeServer {
    return {
        ...val,
        state: (val.state) ?? "available",
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

/**
 * The server attached to the volume
 */
export interface ScalewayInstanceV1VolumeServerProperties {
    id?: string;
    name?: string;
}

export interface ScalewayInstanceV1VolumeServerTemplate {
    /**
     * The ID of the snapshot on which this volume will be based
     */
    base_snapshot?: string;
    /**
     * Force the server to boot on this volume
     */
    boot?: boolean;
    /**
     * UUID of the volume
     */
    id?: string;
    /**
     * Name of the volume
     */
    name?: string;
    /**
     * Organization ID of the volume
     */
    organization?: string;
    /**
     * Project ID of the volume
     */
    project?: string;
    /**
     * Disk size of the volume, must be a multiple of 512 (in bytes)
     */
    size?: number;
    volume_type?: enums.servers.ScalewayInstanceV1VolumeServerTemplateVolumeType;
}
/**
 * scalewayInstanceV1VolumeServerTemplateProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServerTemplate
 */
export function scalewayInstanceV1VolumeServerTemplateProvideDefaults(val: ScalewayInstanceV1VolumeServerTemplate): ScalewayInstanceV1VolumeServerTemplate {
    return {
        ...val,
        boot: (val.boot) ?? false,
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

export interface ScalewayInstanceV1VolumeSummary {
    id?: string;
    name?: string;
    /**
     * (in bytes)
     */
    size?: number;
    volume_type?: enums.servers.ScalewayInstanceV1VolumeSummaryVolumeType;
}
/**
 * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
 */
export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
    return {
        ...val,
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

