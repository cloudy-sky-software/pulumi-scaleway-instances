// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

export interface ScalewayInstanceV1Bootscript {
    /**
     * The bootscript arch
     */
    arch?: enums.images.ScalewayInstanceV1BootscriptArch;
    /**
     * The bootscript arguments
     */
    bootcmdargs?: string;
    /**
     * Dispmay if the bootscript is the default bootscript if no other boot option is configured
     */
    default?: boolean;
    /**
     * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
     */
    dtb?: string;
    /**
     * The bootscript ID
     */
    id?: string;
    /**
     * The initrd (initial ramdisk) configuration
     */
    initrd?: string;
    /**
     * The server kernel version
     */
    kernel?: string;
    /**
     * The bootscript organization ID
     */
    organization?: string;
    /**
     * The bootscript project ID
     */
    project?: string;
    /**
     * Provide information if the bootscript is public
     */
    public?: boolean;
    /**
     * The bootscript title
     */
    title?: string;
    /**
     * The zone in which is the bootscript
     */
    zone?: string;
}
/**
 * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
 */
export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
    };
}

export interface ScalewayInstanceV1GetImageResponse {
    image?: outputs.images.ScalewayInstanceV1Image;
}
/**
 * scalewayInstanceV1GetImageResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetImageResponse
 */
export function scalewayInstanceV1GetImageResponseProvideDefaults(val: ScalewayInstanceV1GetImageResponse): ScalewayInstanceV1GetImageResponse {
    return {
        ...val,
        image: (val.image ? outputs.images.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
    };
}

export interface ScalewayInstanceV1Image {
    arch?: enums.images.ScalewayInstanceV1ImageArch;
    /**
     * (RFC 3339 format)
     */
    creation_date?: string;
    default_bootscript?: outputs.images.ScalewayInstanceV1Bootscript;
    extra_volumes?: {[key: string]: outputs.images.ScalewayInstanceV1Volume};
    from_server?: string;
    id?: string;
    /**
     * (RFC 3339 format)
     */
    modification_date?: string;
    name: string;
    organization?: string;
    project: string;
    public?: boolean;
    root_volume: outputs.images.ScalewayInstanceV1VolumeSummary;
    state?: enums.images.ScalewayInstanceV1ImageState;
    tags?: string[];
    zone?: string;
}
/**
 * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
 */
export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
    return {
        ...val,
        arch: (val.arch) ?? "x86_64",
        default_bootscript: (val.default_bootscript ? outputs.images.scalewayInstanceV1BootscriptProvideDefaults(val.default_bootscript) : undefined),
        root_volume: outputs.images.scalewayInstanceV1VolumeSummaryProvideDefaults(val.root_volume),
        state: (val.state) ?? "available",
    };
}

export interface ScalewayInstanceV1ListImagesResponse {
    /**
     * List of images
     */
    images?: outputs.images.ScalewayInstanceV1Image[];
}

export interface ScalewayInstanceV1Volume {
    /**
     * The volume creation date (RFC 3339 format)
     */
    creation_date?: string;
    /**
     * Show the volume NBD export URI
     */
    export_uri?: string;
    id?: string;
    /**
     * The volume modification date (RFC 3339 format)
     */
    modification_date?: string;
    /**
     * The volume name
     */
    name: string;
    /**
     * The volume organization ID
     */
    organization?: string;
    /**
     * The volume project ID
     */
    project: string;
    /**
     * The server attached to the volume
     */
    server?: outputs.images.ScalewayInstanceV1VolumeServerProperties;
    /**
     * The volume disk size (in bytes)
     */
    size?: number;
    state?: enums.images.ScalewayInstanceV1VolumeState;
    /**
     * The volume tags
     */
    tags?: string[];
    volume_type?: enums.images.ScalewayInstanceV1VolumeVolumeType;
    /**
     * The zone in which is the volume
     */
    zone?: string;
}
/**
 * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
 */
export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
    return {
        ...val,
        state: (val.state) ?? "available",
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

/**
 * The server attached to the volume
 */
export interface ScalewayInstanceV1VolumeServerProperties {
    id?: string;
    name?: string;
}

export interface ScalewayInstanceV1VolumeSummary {
    id?: string;
    name?: string;
    /**
     * (in bytes)
     */
    size?: number;
    volume_type?: enums.images.ScalewayInstanceV1VolumeSummaryVolumeType;
}
/**
 * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
 */
export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
    return {
        ...val,
        volume_type: (val.volume_type) ?? "l_ssd",
    };
}

