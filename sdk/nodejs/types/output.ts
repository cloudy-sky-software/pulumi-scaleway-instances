// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as utilities from "../utilities";

export namespace action {
    export interface ScalewayInstanceV1ListServerActionsResponse {
        actions?: enums.action.ScalewayInstanceV1ListServerActionsResponseActionsItem[];
    }

    export interface ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate {
        volume_type?: enums.action.ScalewayInstanceV1ServerActionRequestVolumeBackupTemplateVolumeType;
    }
    /**
     * scalewayInstanceV1ServerActionRequestVolumeBackupTemplateProvideDefaults sets the appropriate defaults for ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate
     */
    export function scalewayInstanceV1ServerActionRequestVolumeBackupTemplateProvideDefaults(val: ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate): ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate {
        return {
            ...val,
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

}

export namespace availability {
    export interface ScalewayInstanceV1GetServerTypesAvailabilityResponse {
        servers?: {[key: string]: outputs.availability.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability};
    }

    export interface ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability {
        availability?: enums.availability.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityAvailability;
    }
    /**
     * scalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability
     */
    export function scalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityProvideDefaults(val: ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability): ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability {
        return {
            ...val,
            availability: (val.availability) ?? "available",
        };
    }

}

export namespace bootscripts {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.bootscripts.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetBootscriptResponse {
        bootscript?: outputs.bootscripts.ScalewayInstanceV1Bootscript;
    }
    /**
     * scalewayInstanceV1GetBootscriptResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetBootscriptResponse
     */
    export function scalewayInstanceV1GetBootscriptResponseProvideDefaults(val: ScalewayInstanceV1GetBootscriptResponse): ScalewayInstanceV1GetBootscriptResponse {
        return {
            ...val,
            bootscript: (val.bootscript ? outputs.bootscripts.scalewayInstanceV1BootscriptProvideDefaults(val.bootscript) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListBootscriptsResponse {
        /**
         * List of bootscripts
         */
        bootscripts?: outputs.bootscripts.ScalewayInstanceV1Bootscript[];
    }

}

export namespace dashboard {
    export interface ScalewayInstanceV1Dashboard {
        images_count?: number;
        ips_count?: number;
        ips_unused?: number;
        placement_groups_count?: number;
        private_nics_count?: number;
        running_servers_count?: number;
        security_groups_count?: number;
        servers_by_types?: {[key: string]: number};
        servers_count?: number;
        snapshots_count?: number;
        volumes_b_ssd_count?: number;
        volumes_b_ssd_total_size?: number;
        volumes_count?: number;
        volumes_l_ssd_count?: number;
        volumes_l_ssd_total_size?: number;
    }

    export interface ScalewayInstanceV1GetDashboardResponse {
        dashboard?: outputs.dashboard.ScalewayInstanceV1Dashboard;
    }

}

export namespace images {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.images.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetImageResponse {
        image?: outputs.images.ScalewayInstanceV1Image;
    }
    /**
     * scalewayInstanceV1GetImageResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetImageResponse
     */
    export function scalewayInstanceV1GetImageResponseProvideDefaults(val: ScalewayInstanceV1GetImageResponse): ScalewayInstanceV1GetImageResponse {
        return {
            ...val,
            image: (val.image ? outputs.images.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
        };
    }

    export interface ScalewayInstanceV1Image {
        arch?: enums.images.ScalewayInstanceV1ImageArch;
        /**
         * (RFC 3339 format)
         */
        creation_date?: string;
        default_bootscript?: outputs.images.ScalewayInstanceV1Bootscript;
        extra_volumes?: {[key: string]: outputs.images.ScalewayInstanceV1Volume};
        from_server?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modification_date?: string;
        name: string;
        organization?: string;
        project: string;
        public?: boolean;
        root_volume: outputs.images.ScalewayInstanceV1VolumeSummary;
        state?: enums.images.ScalewayInstanceV1ImageState;
        tags?: string[];
        zone?: string;
    }
    /**
     * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
     */
    export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            default_bootscript: (val.default_bootscript ? outputs.images.scalewayInstanceV1BootscriptProvideDefaults(val.default_bootscript) : undefined),
            root_volume: outputs.images.scalewayInstanceV1VolumeSummaryProvideDefaults(val.root_volume),
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ListImagesResponse {
        /**
         * List of images
         */
        images?: outputs.images.ScalewayInstanceV1Image[];
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * Show the volume NBD export URI
         */
        export_uri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.images.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.images.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volume_type?: enums.images.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeSummary {
        id?: string;
        name?: string;
        /**
         * (in bytes)
         */
        size?: number;
        volume_type?: enums.images.ScalewayInstanceV1VolumeSummaryVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
     */
    export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
        return {
            ...val,
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

}

export namespace ips {
    export interface GoogleProtobufStringValue {
    }

    export interface ScalewayInstanceV1GetIpResponse {
        ip?: outputs.ips.ScalewayInstanceV1Ip;
    }

    export interface ScalewayInstanceV1Ip {
        /**
         * (IPv4 address)
         */
        address?: string;
        id?: string;
        organization?: string;
        project: string;
        reverse?: outputs.ips.GoogleProtobufStringValue;
        server?: outputs.ips.ScalewayInstanceV1ServerSummary;
        tags?: string[];
        zone?: string;
    }

    export interface ScalewayInstanceV1ListIpsResponse {
        /**
         * List of ips
         */
        ips?: outputs.ips.ScalewayInstanceV1Ip[];
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

}

export namespace placement_groups {
    export interface ScalewayInstanceV1GetPlacementGroupResponse {
        placement_group?: outputs.placement_groups.ScalewayInstanceV1PlacementGroup;
    }
    /**
     * scalewayInstanceV1GetPlacementGroupResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetPlacementGroupResponse
     */
    export function scalewayInstanceV1GetPlacementGroupResponseProvideDefaults(val: ScalewayInstanceV1GetPlacementGroupResponse): ScalewayInstanceV1GetPlacementGroupResponse {
        return {
            ...val,
            placement_group: (val.placement_group ? outputs.placement_groups.scalewayInstanceV1PlacementGroupProvideDefaults(val.placement_group) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListPlacementGroupsResponse {
        /**
         * List of placement groups
         */
        placement_groups?: outputs.placement_groups.ScalewayInstanceV1PlacementGroup[];
    }

    export interface ScalewayInstanceV1PlacementGroup {
        id?: string;
        /**
         * The placement group name
         */
        name: string;
        /**
         * The placement group organization ID
         */
        organization?: string;
        policy_mode?: enums.placement_groups.ScalewayInstanceV1PlacementGroupPolicyMode;
        /**
         * Returns true if the policy is respected, false otherwise
         */
        policy_respected?: boolean;
        policy_type?: enums.placement_groups.ScalewayInstanceV1PlacementGroupPolicyType;
        /**
         * The placement group project ID
         */
        project: string;
        /**
         * The placement group tags
         */
        tags?: string[];
        /**
         * The zone in which is the placement group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1PlacementGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PlacementGroup
     */
    export function scalewayInstanceV1PlacementGroupProvideDefaults(val: ScalewayInstanceV1PlacementGroup): ScalewayInstanceV1PlacementGroup {
        return {
            ...val,
            policy_mode: (val.policy_mode) ?? "optional",
            policy_type: (val.policy_type) ?? "max_availability",
        };
    }

}

export namespace private_nics {
    export interface ScalewayInstanceV1GetPrivateNICResponse {
        private_nic?: outputs.private_nics.ScalewayInstanceV1PrivateNIC;
    }
    /**
     * scalewayInstanceV1GetPrivateNICResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetPrivateNICResponse
     */
    export function scalewayInstanceV1GetPrivateNICResponseProvideDefaults(val: ScalewayInstanceV1GetPrivateNICResponse): ScalewayInstanceV1GetPrivateNICResponse {
        return {
            ...val,
            private_nic: (val.private_nic ? outputs.private_nics.scalewayInstanceV1PrivateNICProvideDefaults(val.private_nic) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListPrivateNICsResponse {
        private_nics?: outputs.private_nics.ScalewayInstanceV1PrivateNIC[];
    }

    export interface ScalewayInstanceV1PrivateNIC {
        /**
         * The private NIC unique ID
         */
        id?: string;
        /**
         * The private NIC MAC address
         */
        mac_address?: string;
        /**
         * The private network where the private NIC is attached
         */
        private_network_id?: string;
        /**
         * The server the private NIC is attached to
         */
        server_id?: string;
        /**
         * The private NIC state
         */
        state?: enums.private_nics.ScalewayInstanceV1PrivateNICState;
    }
    /**
     * scalewayInstanceV1PrivateNICProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PrivateNIC
     */
    export function scalewayInstanceV1PrivateNICProvideDefaults(val: ScalewayInstanceV1PrivateNIC): ScalewayInstanceV1PrivateNIC {
        return {
            ...val,
            state: (val.state) ?? "available",
        };
    }

}

export namespace rules {
    export interface GoogleProtobufUInt32Value {
    }

    export interface ScalewayInstanceV1GetSecurityGroupRuleResponse {
        rule?: outputs.rules.ScalewayInstanceV1SecurityGroupRule;
    }
    /**
     * scalewayInstanceV1GetSecurityGroupRuleResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSecurityGroupRuleResponse
     */
    export function scalewayInstanceV1GetSecurityGroupRuleResponseProvideDefaults(val: ScalewayInstanceV1GetSecurityGroupRuleResponse): ScalewayInstanceV1GetSecurityGroupRuleResponse {
        return {
            ...val,
            rule: (val.rule ? outputs.rules.scalewayInstanceV1SecurityGroupRuleProvideDefaults(val.rule) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSecurityGroupRulesResponse {
        /**
         * List of security rules
         */
        rules?: outputs.rules.ScalewayInstanceV1SecurityGroupRule[];
    }

    export interface ScalewayInstanceV1SecurityGroupRule {
        action?: enums.rules.ScalewayInstanceV1SecurityGroupRuleAction;
        dest_port_from?: outputs.rules.GoogleProtobufUInt32Value;
        dest_port_to?: outputs.rules.GoogleProtobufUInt32Value;
        direction?: enums.rules.ScalewayInstanceV1SecurityGroupRuleDirection;
        editable?: boolean;
        id?: string;
        /**
         * (IP network)
         */
        ip_range?: string;
        position?: number;
        protocol?: enums.rules.ScalewayInstanceV1SecurityGroupRuleProtocol;
        zone?: string;
    }
    /**
     * scalewayInstanceV1SecurityGroupRuleProvideDefaults sets the appropriate defaults for ScalewayInstanceV1SecurityGroupRule
     */
    export function scalewayInstanceV1SecurityGroupRuleProvideDefaults(val: ScalewayInstanceV1SecurityGroupRule): ScalewayInstanceV1SecurityGroupRule {
        return {
            ...val,
            action: (val.action) ?? "accept",
            direction: (val.direction) ?? "inbound",
            protocol: (val.protocol) ?? "TCP",
        };
    }

    export interface ScalewayInstanceV1SetSecurityGroupRulesRequestRule {
        /**
         * Action to apply when the rule matches a packet
         */
        action?: enums.rules.ScalewayInstanceV1SetSecurityGroupRulesRequestRuleAction;
        /**
         * Beginning of the range of ports this rule applies to (inclusive). This value will be set to null if protocol is ICMP or ANY
         */
        dest_port_from?: number;
        /**
         * End of the range of ports this rule applies to (inclusive). This value will be set to null if protocol is ICMP or ANY, or if it is equal to dest_port_from
         */
        dest_port_to?: number;
        /**
         * Direction the rule applies to
         */
        direction?: enums.rules.ScalewayInstanceV1SetSecurityGroupRulesRequestRuleDirection;
        /**
         * Indicates if this rule is editable. Rules with the value false will be ignored
         */
        editable?: boolean;
        /**
         * UUID of the security rule to update. If no value is provided, a new rule will be created
         */
        id?: string;
        /**
         * The range of IP address this rules applies to (IP network)
         */
        ip_range?: string;
        /**
         * Position of this rule in the security group rules list. If several rules are passed with the same position, the resulting order is undefined
         */
        position?: number;
        /**
         * Protocol family this rule applies to
         */
        protocol?: enums.rules.ScalewayInstanceV1SetSecurityGroupRulesRequestRuleProtocol;
        /**
         * Zone of the rule. This field is ignored
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1SetSecurityGroupRulesRequestRuleProvideDefaults sets the appropriate defaults for ScalewayInstanceV1SetSecurityGroupRulesRequestRule
     */
    export function scalewayInstanceV1SetSecurityGroupRulesRequestRuleProvideDefaults(val: ScalewayInstanceV1SetSecurityGroupRulesRequestRule): ScalewayInstanceV1SetSecurityGroupRulesRequestRule {
        return {
            ...val,
            action: (val.action) ?? "accept",
            direction: (val.direction) ?? "inbound",
            protocol: (val.protocol) ?? "TCP",
        };
    }

}

export namespace security_groups {
    export interface ScalewayInstanceV1GetSecurityGroupResponse {
        security_group?: outputs.security_groups.ScalewayInstanceV1SecurityGroup;
    }
    /**
     * scalewayInstanceV1GetSecurityGroupResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSecurityGroupResponse
     */
    export function scalewayInstanceV1GetSecurityGroupResponseProvideDefaults(val: ScalewayInstanceV1GetSecurityGroupResponse): ScalewayInstanceV1GetSecurityGroupResponse {
        return {
            ...val,
            security_group: (val.security_group ? outputs.security_groups.scalewayInstanceV1SecurityGroupProvideDefaults(val.security_group) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSecurityGroupsResponse {
        security_groups?: outputs.security_groups.ScalewayInstanceV1SecurityGroup[];
        total_count?: number;
    }

    export interface ScalewayInstanceV1SecurityGroup {
        /**
         * The security group creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * The security groups description
         */
        description?: string;
        /**
         * True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
         */
        enable_default_security?: boolean;
        id?: string;
        /**
         * The default inbound policy
         */
        inbound_default_policy?: enums.security_groups.ScalewayInstanceV1SecurityGroupInboundDefaultPolicy;
        /**
         * The security group modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The security groups name
         */
        name: string;
        /**
         * The security groups organization ID
         */
        organization?: string;
        /**
         * True if it is your default security group for this organization ID
         */
        organization_default?: boolean;
        /**
         * The default outbound policy
         */
        outbound_default_policy?: enums.security_groups.ScalewayInstanceV1SecurityGroupOutboundDefaultPolicy;
        /**
         * The security group project ID
         */
        project: string;
        /**
         * True if it is your default security group for this project ID
         */
        project_default?: boolean;
        /**
         * List of servers attached to this security group
         */
        servers?: outputs.security_groups.ScalewayInstanceV1ServerSummary[];
        /**
         * Security group state
         */
        state?: enums.security_groups.ScalewayInstanceV1SecurityGroupState;
        /**
         * True if the security group is stateful
         */
        stateful?: boolean;
        /**
         * The security group tags
         */
        tags?: string[];
        /**
         * The zone in which is the security group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1SecurityGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1SecurityGroup
     */
    export function scalewayInstanceV1SecurityGroupProvideDefaults(val: ScalewayInstanceV1SecurityGroup): ScalewayInstanceV1SecurityGroup {
        return {
            ...val,
            inbound_default_policy: (val.inbound_default_policy) ?? "accept",
            outbound_default_policy: (val.outbound_default_policy) ?? "accept",
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

}

export namespace servers {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.servers.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetPlacementGroupServersResponse {
        servers?: outputs.servers.ScalewayInstanceV1PlacementGroupServer[];
    }

    export interface ScalewayInstanceV1GetServerResponse {
        server?: outputs.servers.ScalewayInstanceV1Server;
    }
    /**
     * scalewayInstanceV1GetServerResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetServerResponse
     */
    export function scalewayInstanceV1GetServerResponseProvideDefaults(val: ScalewayInstanceV1GetServerResponse): ScalewayInstanceV1GetServerResponse {
        return {
            ...val,
            server: (val.server ? outputs.servers.scalewayInstanceV1ServerProvideDefaults(val.server) : undefined),
        };
    }

    export interface ScalewayInstanceV1Image {
        arch?: enums.servers.ScalewayInstanceV1ImageArch;
        /**
         * (RFC 3339 format)
         */
        creation_date?: string;
        default_bootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
        extra_volumes?: {[key: string]: outputs.servers.ScalewayInstanceV1Volume};
        from_server?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modification_date?: string;
        name: string;
        organization?: string;
        project: string;
        public?: boolean;
        root_volume: outputs.servers.ScalewayInstanceV1VolumeSummary;
        state?: enums.servers.ScalewayInstanceV1ImageState;
        tags?: string[];
        zone?: string;
    }
    /**
     * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
     */
    export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            default_bootscript: (val.default_bootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.default_bootscript) : undefined),
            root_volume: outputs.servers.scalewayInstanceV1VolumeSummaryProvideDefaults(val.root_volume),
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ListServersResponse {
        /**
         * List of servers
         */
        servers?: outputs.servers.ScalewayInstanceV1Server[];
    }

    export interface ScalewayInstanceV1ListServersTypesResponse {
        /**
         * List of server types
         */
        servers?: {[key: string]: outputs.servers.ScalewayInstanceV1ServerType};
    }

    export interface ScalewayInstanceV1PlacementGroup {
        id?: string;
        /**
         * The placement group name
         */
        name: string;
        /**
         * The placement group organization ID
         */
        organization?: string;
        policy_mode?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyMode;
        /**
         * Returns true if the policy is respected, false otherwise
         */
        policy_respected?: boolean;
        policy_type?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyType;
        /**
         * The placement group project ID
         */
        project: string;
        /**
         * The placement group tags
         */
        tags?: string[];
        /**
         * The zone in which is the placement group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1PlacementGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PlacementGroup
     */
    export function scalewayInstanceV1PlacementGroupProvideDefaults(val: ScalewayInstanceV1PlacementGroup): ScalewayInstanceV1PlacementGroup {
        return {
            ...val,
            policy_mode: (val.policy_mode) ?? "optional",
            policy_type: (val.policy_type) ?? "max_availability",
        };
    }

    export interface ScalewayInstanceV1PlacementGroupServer {
        id?: string;
        name?: string;
        policy_respected?: boolean;
    }

    export interface ScalewayInstanceV1PrivateNIC {
        /**
         * The private NIC unique ID
         */
        id?: string;
        /**
         * The private NIC MAC address
         */
        mac_address?: string;
        /**
         * The private network where the private NIC is attached
         */
        private_network_id?: string;
        /**
         * The server the private NIC is attached to
         */
        server_id?: string;
        /**
         * The private NIC state
         */
        state?: enums.servers.ScalewayInstanceV1PrivateNICState;
    }
    /**
     * scalewayInstanceV1PrivateNICProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PrivateNIC
     */
    export function scalewayInstanceV1PrivateNICProvideDefaults(val: ScalewayInstanceV1PrivateNIC): ScalewayInstanceV1PrivateNIC {
        return {
            ...val,
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1Server {
        /**
         * Provide as list of allowed actions on the server
         */
        allowed_actions?: enums.servers.ScalewayInstanceV1ServerAllowedActionsItem[];
        /**
         * The server arch
         */
        arch?: enums.servers.ScalewayInstanceV1ServerArch;
        boot_type?: enums.servers.ScalewayInstanceV1ServerBootType;
        bootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
        /**
         * The server commercial type (eg. GP1-M)
         */
        commercial_type?: string;
        /**
         * The server creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * True if a dynamic IP is required
         */
        dynamic_ip_required?: boolean;
        /**
         * True if IPv6 is enabled
         */
        enable_ipv6?: boolean;
        /**
         * The server host name
         */
        hostname?: string;
        /**
         * The server unique ID
         */
        id?: string;
        image?: outputs.servers.ScalewayInstanceV1Image;
        /**
         * The server IPv6 address
         */
        ipv6?: outputs.servers.ScalewayInstanceV1ServerIpv6Properties;
        /**
         * The server location
         */
        location?: outputs.servers.ScalewayInstanceV1ServerLocationProperties;
        /**
         * The server planned maintenances
         */
        maintenances?: outputs.servers.ScalewayInstanceV1ServerMaintenance[];
        /**
         * The server modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The server name
         */
        name?: string;
        /**
         * The server organization ID
         */
        organization?: string;
        placement_group?: outputs.servers.ScalewayInstanceV1PlacementGroup;
        /**
         * The server private IP address
         */
        private_ip?: string;
        /**
         * The server private NICs
         */
        private_nics?: outputs.servers.ScalewayInstanceV1PrivateNIC[];
        /**
         * The server project ID
         */
        project?: string;
        /**
         * The server protection option is activated
         */
        protected?: boolean;
        /**
         * Information about the public IP
         */
        public_ip?: outputs.servers.ScalewayInstanceV1ServerPublicIpProperties;
        /**
         * The server security group
         */
        security_group?: outputs.servers.ScalewayInstanceV1ServerSecurityGroupProperties;
        /**
         * The server state
         */
        state?: enums.servers.ScalewayInstanceV1ServerState;
        /**
         * The server state_detail
         */
        state_detail?: string;
        /**
         * The server associated tags
         */
        tags?: string[];
        /**
         * The server volumes
         */
        volumes?: {[key: string]: outputs.servers.ScalewayInstanceV1VolumeServer};
        /**
         * The zone in which is the server
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1ServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Server
     */
    export function scalewayInstanceV1ServerProvideDefaults(val: ScalewayInstanceV1Server): ScalewayInstanceV1Server {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            boot_type: (val.boot_type) ?? "local",
            bootscript: (val.bootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.bootscript) : undefined),
            image: (val.image ? outputs.servers.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
            placement_group: (val.placement_group ? outputs.servers.scalewayInstanceV1PlacementGroupProvideDefaults(val.placement_group) : undefined),
            state: (val.state) ?? "running",
        };
    }

    /**
     * The server IPv6 address
     */
    export interface ScalewayInstanceV1ServerIpv6Properties {
        /**
         * The server IPv6 IP-Address (IPv6 address)
         */
        address?: string;
        /**
         * The IPv6 IP-addresses gateway (IPv6 address)
         */
        gateway?: string;
        /**
         * The IPv6 IP-addresses CIDR netmask
         */
        netmask?: string;
    }

    /**
     * The server location
     */
    export interface ScalewayInstanceV1ServerLocationProperties {
        cluster_id?: string;
        hypervisor_id?: string;
        node_id?: string;
        platform_id?: string;
        zone_id?: string;
    }

    export interface ScalewayInstanceV1ServerMaintenance {
    }

    /**
     * Information about the public IP
     */
    export interface ScalewayInstanceV1ServerPublicIpProperties {
        /**
         * The server public IPv4 IP-Address (IPv4 address)
         */
        address?: string;
        /**
         * True if the IP address is dynamic
         */
        dynamic?: boolean;
        /**
         * The unique ID of the IP address
         */
        id?: string;
    }

    /**
     * The server security group
     */
    export interface ScalewayInstanceV1ServerSecurityGroupProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1ServerType {
        /**
         * Alternative instance name if any
         */
        alt_names?: string[];
        /**
         * CPU architecture
         */
        arch?: enums.servers.ScalewayInstanceV1ServerTypeArch;
        /**
         * True if it is a baremetal instance
         */
        baremetal?: boolean;
        /**
         * Capabilities
         */
        capabilities?: outputs.servers.ScalewayInstanceV1ServerTypeCapabilitiesProperties;
        /**
         * Number of GPU
         */
        gpu?: number;
        /**
         * Hourly price in Euro
         */
        hourly_price?: number;
        /**
         * Estimated monthly price, for a 30 days month, in Euro
         */
        monthly_price?: number;
        /**
         * Number of CPU
         */
        ncpus?: number;
        /**
         * Network available for the instance
         */
        network?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkProperties;
        /**
         * Additional volume constraints
         */
        per_volume_constraint?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintProperties;
        /**
         * Available RAM in bytes
         */
        ram?: number;
        /**
         * Initial volume constraints
         */
        volumes_constraint?: outputs.servers.ScalewayInstanceV1ServerTypeVolumesConstraintProperties;
    }
    /**
     * scalewayInstanceV1ServerTypeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1ServerType
     */
    export function scalewayInstanceV1ServerTypeProvideDefaults(val: ScalewayInstanceV1ServerType): ScalewayInstanceV1ServerType {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    /**
     * Capabilities
     */
    export interface ScalewayInstanceV1ServerTypeCapabilitiesProperties {
        /**
         * True if server supports block storage
         */
        block_storage?: boolean;
        /**
         * List of supported boot types
         */
        boot_types?: enums.servers.ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem[];
    }

    export interface ScalewayInstanceV1ServerTypeNetworkInterface {
        /**
         * Maximum internal bandwidth in bits per seconds
         */
        internal_bandwidth?: number;
        /**
         * Maximum internet bandwidth in bits per seconds
         */
        internet_bandwidth?: number;
    }

    /**
     * Network available for the instance
     */
    export interface ScalewayInstanceV1ServerTypeNetworkProperties {
        /**
         * List of available network interfaces
         */
        interfaces?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkInterface[];
        /**
         * True if IPv6 is enabled
         */
        ipv6_support?: boolean;
        /**
         * Total maximum internal bandwidth in bits per seconds
         */
        sum_internal_bandwidth?: number;
        /**
         * Total maximum internet bandwidth in bits per seconds
         */
        sum_internet_bandwidth?: number;
    }

    /**
     * Additional volume constraints
     */
    export interface ScalewayInstanceV1ServerTypePerVolumeConstraintProperties {
        /**
         * Local SSD volumes
         */
        l_ssd?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties;
    }

    /**
     * Local SSD volumes
     */
    export interface ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties {
        /**
         * Maximum volume size in bytes (in bytes)
         */
        max_size?: number;
        /**
         * Minimum volume size in bytes (in bytes)
         */
        min_size?: number;
    }

    /**
     * Initial volume constraints
     */
    export interface ScalewayInstanceV1ServerTypeVolumesConstraintProperties {
        /**
         * Maximum volume size in bytes (in bytes)
         */
        max_size?: number;
        /**
         * Minimum volume size in bytes (in bytes)
         */
        min_size?: number;
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * Show the volume NBD export URI
         */
        export_uri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.servers.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.servers.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volume_type?: enums.servers.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    export interface ScalewayInstanceV1VolumeServer {
        boot?: boolean;
        /**
         * (RFC 3339 format)
         */
        creation_date?: string;
        export_uri?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modification_date?: string;
        name?: string;
        organization?: string;
        project?: string;
        server?: outputs.servers.ScalewayInstanceV1ServerSummary;
        /**
         * (in bytes)
         */
        size?: number;
        state?: enums.servers.ScalewayInstanceV1VolumeServerState;
        volume_type?: enums.servers.ScalewayInstanceV1VolumeServerVolumeType;
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServer
     */
    export function scalewayInstanceV1VolumeServerProvideDefaults(val: ScalewayInstanceV1VolumeServer): ScalewayInstanceV1VolumeServer {
        return {
            ...val,
            state: (val.state) ?? "available",
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeServerTemplate {
        /**
         * The ID of the snapshot on which this volume will be based
         */
        base_snapshot?: string;
        /**
         * Force the server to boot on this volume
         */
        boot?: boolean;
        /**
         * UUID of the volume
         */
        id?: string;
        /**
         * Name of the volume
         */
        name?: string;
        /**
         * Organization ID of the volume
         */
        organization?: string;
        /**
         * Project ID of the volume
         */
        project?: string;
        /**
         * Disk size of the volume, must be a multiple of 512 (in bytes)
         */
        size?: number;
        volume_type?: enums.servers.ScalewayInstanceV1VolumeServerTemplateVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeServerTemplateProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServerTemplate
     */
    export function scalewayInstanceV1VolumeServerTemplateProvideDefaults(val: ScalewayInstanceV1VolumeServerTemplate): ScalewayInstanceV1VolumeServerTemplate {
        return {
            ...val,
            boot: (val.boot) ?? false,
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    export interface ScalewayInstanceV1VolumeSummary {
        id?: string;
        name?: string;
        /**
         * (in bytes)
         */
        size?: number;
        volume_type?: enums.servers.ScalewayInstanceV1VolumeSummaryVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
     */
    export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
        return {
            ...val,
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

}

export namespace snapshots {
    /**
     * The volume on which the snapshot is based on
     */
    export interface BaseVolumeProperties {
        /**
         * The volume ID on which the snapshot is based on
         */
        id?: string;
        /**
         * The volume name on which the snapshot is based on
         */
        name?: string;
    }

    export interface ScalewayInstanceV1GetSnapshotResponse {
        snapshot?: outputs.snapshots.ScalewayInstanceV1Snapshot;
    }
    /**
     * scalewayInstanceV1GetSnapshotResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSnapshotResponse
     */
    export function scalewayInstanceV1GetSnapshotResponseProvideDefaults(val: ScalewayInstanceV1GetSnapshotResponse): ScalewayInstanceV1GetSnapshotResponse {
        return {
            ...val,
            snapshot: (val.snapshot ? outputs.snapshots.scalewayInstanceV1SnapshotProvideDefaults(val.snapshot) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSnapshotsResponse {
        /**
         * List of snapshots
         */
        snapshots?: outputs.snapshots.ScalewayInstanceV1Snapshot[];
    }

    export interface ScalewayInstanceV1Snapshot {
        /**
         * The volume on which the snapshot is based on
         */
        base_volume?: outputs.snapshots.ScalewayInstanceV1SnapshotBaseVolumeProperties;
        /**
         * The snapshot creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * The reason for the failed snapshot import
         */
        error_reason?: string;
        id?: string;
        /**
         * The snapshot modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The snapshot name
         */
        name?: string;
        /**
         * The snapshot organization ID
         */
        organization?: string;
        /**
         * The snapshot project ID
         */
        project?: string;
        /**
         * The snapshot size (in bytes)
         */
        size?: number;
        state?: enums.snapshots.ScalewayInstanceV1SnapshotState;
        /**
         * The snapshot tags
         */
        tags?: string[];
        volume_type?: enums.snapshots.ScalewayInstanceV1SnapshotVolumeType;
        /**
         * The snapshot zone
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1SnapshotProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Snapshot
     */
    export function scalewayInstanceV1SnapshotProvideDefaults(val: ScalewayInstanceV1Snapshot): ScalewayInstanceV1Snapshot {
        return {
            ...val,
            state: (val.state) ?? "available",
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    /**
     * The volume on which the snapshot is based on
     */
    export interface ScalewayInstanceV1SnapshotBaseVolumeProperties {
        /**
         * The volume ID on which the snapshot is based on
         */
        id?: string;
        /**
         * The volume name on which the snapshot is based on
         */
        name?: string;
    }

}

export namespace user_data {
    export interface ScalewayInstanceV1ListServerUserDataResponse {
        user_data?: string[];
    }

    export interface ScalewayStdFile {
        content?: string;
        content_type?: string;
        name?: string;
    }

}

export namespace volumes {
    export interface ScalewayInstanceV1GetVolumeResponse {
        volume?: outputs.volumes.ScalewayInstanceV1Volume;
    }
    /**
     * scalewayInstanceV1GetVolumeResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetVolumeResponse
     */
    export function scalewayInstanceV1GetVolumeResponseProvideDefaults(val: ScalewayInstanceV1GetVolumeResponse): ScalewayInstanceV1GetVolumeResponse {
        return {
            ...val,
            volume: (val.volume ? outputs.volumes.scalewayInstanceV1VolumeProvideDefaults(val.volume) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListVolumesResponse {
        /**
         * List of volumes
         */
        volumes?: outputs.volumes.ScalewayInstanceV1Volume[];
    }

    export interface ScalewayInstanceV1ListVolumesTypesResponse {
        /**
         * Map of volume types
         */
        volumes?: {[key: string]: outputs.volumes.ScalewayInstanceV1VolumeType};
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creation_date?: string;
        /**
         * Show the volume NBD export URI
         */
        export_uri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modification_date?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.volumes.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.volumes.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volume_type?: enums.volumes.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volume_type: (val.volume_type) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeType {
        capabilities?: outputs.volumes.ScalewayInstanceV1VolumeTypeCapabilities;
        constraints?: outputs.volumes.ScalewayInstanceV1VolumeTypeConstraints;
        display_name?: string;
    }

    export interface ScalewayInstanceV1VolumeTypeCapabilities {
        snapshot?: boolean;
    }

    export interface ScalewayInstanceV1VolumeTypeConstraints {
        /**
         * (in bytes)
         */
        max?: number;
        /**
         * (in bytes)
         */
        min?: number;
    }

    /**
     * The server attached to the volume
     */
    export interface ServerProperties {
        id?: string;
        name?: string;
    }

}
