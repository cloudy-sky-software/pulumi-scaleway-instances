// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as utilities from "../utilities";

export namespace action {
    export interface ScalewayInstanceV1ListServerActionsResponse {
        actions?: enums.action.ScalewayInstanceV1ListServerActionsResponseActionsItem[];
    }

    export interface ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate {
        volumeType?: enums.action.ServerActionScalewayInstanceV1ServerActionRequestVolumeBackupTemplateVolumeType;
    }
    /**
     * scalewayInstanceV1ServerActionRequestVolumeBackupTemplateProvideDefaults sets the appropriate defaults for ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate
     */
    export function scalewayInstanceV1ServerActionRequestVolumeBackupTemplateProvideDefaults(val: ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate): ScalewayInstanceV1ServerActionRequestVolumeBackupTemplate {
        return {
            ...val,
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    export interface ScalewayInstanceV1Task {
        /**
         * The description of the task
         */
        description?: string;
        hrefFrom?: string;
        hrefResult?: string;
        /**
         * The unique ID of the task
         */
        id?: string;
        /**
         * The progress of the task in percent
         */
        progress?: number;
        /**
         * The task start date (RFC 3339 format)
         */
        startedAt?: string;
        /**
         * The task status
         */
        status?: enums.action.ServerActionScalewayInstanceV1TaskStatus;
        /**
         * The task end date (RFC 3339 format)
         */
        terminatedAt?: string;
        /**
         * The zone in which is the task
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1TaskProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Task
     */
    export function scalewayInstanceV1TaskProvideDefaults(val: ScalewayInstanceV1Task): ScalewayInstanceV1Task {
        return {
            ...val,
            status: (val.status) ?? "pending",
        };
    }

}

export namespace availability {
    export interface ScalewayInstanceV1GetServerTypesAvailabilityResponse {
        servers?: {[key: string]: outputs.availability.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability};
    }

    export interface ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability {
        availability?: enums.availability.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityAvailability;
    }
    /**
     * scalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability
     */
    export function scalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityProvideDefaults(val: ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability): ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability {
        return {
            ...val,
            availability: (val.availability) ?? "available",
        };
    }

}

export namespace bootscripts {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.bootscripts.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetBootscriptResponse {
        bootscript?: outputs.bootscripts.ScalewayInstanceV1Bootscript;
    }
    /**
     * scalewayInstanceV1GetBootscriptResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetBootscriptResponse
     */
    export function scalewayInstanceV1GetBootscriptResponseProvideDefaults(val: ScalewayInstanceV1GetBootscriptResponse): ScalewayInstanceV1GetBootscriptResponse {
        return {
            ...val,
            bootscript: (val.bootscript ? outputs.bootscripts.scalewayInstanceV1BootscriptProvideDefaults(val.bootscript) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListBootscriptsResponse {
        /**
         * List of bootscripts
         */
        bootscripts?: outputs.bootscripts.ScalewayInstanceV1Bootscript[];
    }

}

export namespace dashboard {
    export interface ScalewayInstanceV1Dashboard {
        imagesCount?: number;
        ipsCount?: number;
        ipsUnused?: number;
        placementGroupsCount?: number;
        privateNicsCount?: number;
        runningServersCount?: number;
        securityGroupsCount?: number;
        serversByTypes?: {[key: string]: number};
        serversCount?: number;
        snapshotsCount?: number;
        volumesBSsdCount?: number;
        volumesBSsdTotalSize?: number;
        volumesCount?: number;
        volumesLSsdCount?: number;
        volumesLSsdTotalSize?: number;
    }

    export interface ScalewayInstanceV1GetDashboardResponse {
        dashboard?: outputs.dashboard.ScalewayInstanceV1Dashboard;
    }

}

export namespace images {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.images.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetImageResponse {
        image?: outputs.images.ScalewayInstanceV1Image;
    }
    /**
     * scalewayInstanceV1GetImageResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetImageResponse
     */
    export function scalewayInstanceV1GetImageResponseProvideDefaults(val: ScalewayInstanceV1GetImageResponse): ScalewayInstanceV1GetImageResponse {
        return {
            ...val,
            image: (val.image ? outputs.images.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
        };
    }

    export interface ScalewayInstanceV1Image {
        arch?: enums.images.ScalewayInstanceV1ImageArch;
        /**
         * (RFC 3339 format)
         */
        creationDate?: string;
        defaultBootscript?: outputs.images.ScalewayInstanceV1Bootscript;
        extraVolumes?: {[key: string]: outputs.images.ScalewayInstanceV1Volume};
        fromServer?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modificationDate?: string;
        name: string;
        organization?: string;
        project: string;
        public?: boolean;
        rootVolume: outputs.images.ScalewayInstanceV1VolumeSummary;
        state?: enums.images.ScalewayInstanceV1ImageState;
        tags?: string[];
        zone?: string;
    }
    /**
     * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
     */
    export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            defaultBootscript: (val.defaultBootscript ? outputs.images.scalewayInstanceV1BootscriptProvideDefaults(val.defaultBootscript) : undefined),
            rootVolume: outputs.images.scalewayInstanceV1VolumeSummaryProvideDefaults(val.rootVolume),
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ListImagesResponse {
        /**
         * List of images
         */
        images?: outputs.images.ScalewayInstanceV1Image[];
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * Show the volume NBD export URI
         */
        exportUri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.images.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.images.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volumeType?: enums.images.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeSummary {
        id?: string;
        name?: string;
        /**
         * (in bytes)
         */
        size?: number;
        volumeType?: enums.images.ScalewayInstanceV1VolumeSummaryVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
     */
    export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
        return {
            ...val,
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

}

export namespace ips {
    export interface ScalewayInstanceV1GetIpResponse {
        ip?: outputs.ips.ScalewayInstanceV1Ip;
    }

    export interface ScalewayInstanceV1Ip {
        /**
         * (IPv4 address)
         */
        address?: string;
        id?: string;
        organization?: string;
        project: string;
        reverse?: string;
        server?: outputs.ips.ScalewayInstanceV1ServerSummary;
        tags?: string[];
        zone?: string;
    }

    export interface ScalewayInstanceV1ListIpsResponse {
        /**
         * List of ips
         */
        ips?: outputs.ips.ScalewayInstanceV1Ip[];
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

}

export namespace placement_groups {
    export interface ScalewayInstanceV1GetPlacementGroupResponse {
        placementGroup?: outputs.placement_groups.ScalewayInstanceV1PlacementGroup;
    }
    /**
     * scalewayInstanceV1GetPlacementGroupResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetPlacementGroupResponse
     */
    export function scalewayInstanceV1GetPlacementGroupResponseProvideDefaults(val: ScalewayInstanceV1GetPlacementGroupResponse): ScalewayInstanceV1GetPlacementGroupResponse {
        return {
            ...val,
            placementGroup: (val.placementGroup ? outputs.placement_groups.scalewayInstanceV1PlacementGroupProvideDefaults(val.placementGroup) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListPlacementGroupsResponse {
        /**
         * List of placement groups
         */
        placementGroups?: outputs.placement_groups.ScalewayInstanceV1PlacementGroup[];
    }

    export interface ScalewayInstanceV1PlacementGroup {
        id?: string;
        /**
         * The placement group name
         */
        name: string;
        /**
         * The placement group organization ID
         */
        organization?: string;
        policyMode?: enums.placement_groups.ScalewayInstanceV1PlacementGroupPolicyMode;
        /**
         * Returns true if the policy is respected, false otherwise
         */
        policyRespected?: boolean;
        policyType?: enums.placement_groups.ScalewayInstanceV1PlacementGroupPolicyType;
        /**
         * The placement group project ID
         */
        project: string;
        /**
         * The placement group tags
         */
        tags?: string[];
        /**
         * The zone in which is the placement group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1PlacementGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PlacementGroup
     */
    export function scalewayInstanceV1PlacementGroupProvideDefaults(val: ScalewayInstanceV1PlacementGroup): ScalewayInstanceV1PlacementGroup {
        return {
            ...val,
            policyMode: (val.policyMode) ?? "optional",
            policyType: (val.policyType) ?? "max_availability",
        };
    }

}

export namespace private_nics {
    export interface ScalewayInstanceV1GetPrivateNICResponse {
        privateNic?: outputs.private_nics.ScalewayInstanceV1PrivateNIC;
    }
    /**
     * scalewayInstanceV1GetPrivateNICResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetPrivateNICResponse
     */
    export function scalewayInstanceV1GetPrivateNICResponseProvideDefaults(val: ScalewayInstanceV1GetPrivateNICResponse): ScalewayInstanceV1GetPrivateNICResponse {
        return {
            ...val,
            privateNic: (val.privateNic ? outputs.private_nics.scalewayInstanceV1PrivateNICProvideDefaults(val.privateNic) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListPrivateNICsResponse {
        privateNics?: outputs.private_nics.ScalewayInstanceV1PrivateNIC[];
    }

    export interface ScalewayInstanceV1PrivateNIC {
        /**
         * The private NIC unique ID
         */
        id?: string;
        /**
         * The private NIC MAC address
         */
        macAddress?: string;
        /**
         * The private network where the private NIC is attached
         */
        privateNetworkId?: string;
        /**
         * The server the private NIC is attached to
         */
        serverId?: string;
        /**
         * The private NIC state
         */
        state?: enums.private_nics.ScalewayInstanceV1PrivateNICState;
    }
    /**
     * scalewayInstanceV1PrivateNICProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PrivateNIC
     */
    export function scalewayInstanceV1PrivateNICProvideDefaults(val: ScalewayInstanceV1PrivateNIC): ScalewayInstanceV1PrivateNIC {
        return {
            ...val,
            state: (val.state) ?? "available",
        };
    }

}

export namespace rules {
    export interface ScalewayInstanceV1GetSecurityGroupRuleResponse {
        rule?: outputs.rules.ScalewayInstanceV1SecurityGroupRule;
    }
    /**
     * scalewayInstanceV1GetSecurityGroupRuleResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSecurityGroupRuleResponse
     */
    export function scalewayInstanceV1GetSecurityGroupRuleResponseProvideDefaults(val: ScalewayInstanceV1GetSecurityGroupRuleResponse): ScalewayInstanceV1GetSecurityGroupRuleResponse {
        return {
            ...val,
            rule: (val.rule ? outputs.rules.scalewayInstanceV1SecurityGroupRuleProvideDefaults(val.rule) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSecurityGroupRulesResponse {
        /**
         * List of security rules
         */
        rules?: outputs.rules.ScalewayInstanceV1SecurityGroupRule[];
    }

    export interface ScalewayInstanceV1SecurityGroupRule {
        action?: enums.rules.ScalewayInstanceV1SecurityGroupRuleAction;
        destPortFrom?: number;
        destPortTo?: number;
        direction?: enums.rules.ScalewayInstanceV1SecurityGroupRuleDirection;
        editable?: boolean;
        id?: string;
        /**
         * (IP network)
         */
        ipRange?: string;
        position?: number;
        protocol?: enums.rules.ScalewayInstanceV1SecurityGroupRuleProtocol;
        zone?: string;
    }
    /**
     * scalewayInstanceV1SecurityGroupRuleProvideDefaults sets the appropriate defaults for ScalewayInstanceV1SecurityGroupRule
     */
    export function scalewayInstanceV1SecurityGroupRuleProvideDefaults(val: ScalewayInstanceV1SecurityGroupRule): ScalewayInstanceV1SecurityGroupRule {
        return {
            ...val,
            action: (val.action) ?? "accept",
            direction: (val.direction) ?? "inbound",
            protocol: (val.protocol) ?? "TCP",
        };
    }

}

export namespace security_groups {
    export interface ScalewayInstanceV1GetSecurityGroupResponse {
        securityGroup?: outputs.security_groups.ScalewayInstanceV1SecurityGroup;
    }
    /**
     * scalewayInstanceV1GetSecurityGroupResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSecurityGroupResponse
     */
    export function scalewayInstanceV1GetSecurityGroupResponseProvideDefaults(val: ScalewayInstanceV1GetSecurityGroupResponse): ScalewayInstanceV1GetSecurityGroupResponse {
        return {
            ...val,
            securityGroup: (val.securityGroup ? outputs.security_groups.scalewayInstanceV1SecurityGroupProvideDefaults(val.securityGroup) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSecurityGroupsResponse {
        securityGroups?: outputs.security_groups.ScalewayInstanceV1SecurityGroup[];
        totalCount?: number;
    }

    export interface ScalewayInstanceV1SecurityGroup {
        /**
         * The security group creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * The security groups description
         */
        description?: string;
        /**
         * True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
         */
        enableDefaultSecurity?: boolean;
        id?: string;
        /**
         * The default inbound policy
         */
        inboundDefaultPolicy?: enums.security_groups.ScalewayInstanceV1SecurityGroupInboundDefaultPolicy;
        /**
         * The security group modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The security groups name
         */
        name: string;
        /**
         * The security groups organization ID
         */
        organization?: string;
        /**
         * True if it is your default security group for this organization ID
         */
        organizationDefault?: boolean;
        /**
         * The default outbound policy
         */
        outboundDefaultPolicy?: enums.security_groups.ScalewayInstanceV1SecurityGroupOutboundDefaultPolicy;
        /**
         * The security group project ID
         */
        project: string;
        /**
         * True if it is your default security group for this project ID
         */
        projectDefault?: boolean;
        /**
         * List of servers attached to this security group
         */
        servers?: outputs.security_groups.ScalewayInstanceV1ServerSummary[];
        /**
         * Security group state
         */
        state?: enums.security_groups.ScalewayInstanceV1SecurityGroupState;
        /**
         * True if the security group is stateful
         */
        stateful?: boolean;
        /**
         * The security group tags
         */
        tags?: string[];
        /**
         * The zone in which is the security group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1SecurityGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1SecurityGroup
     */
    export function scalewayInstanceV1SecurityGroupProvideDefaults(val: ScalewayInstanceV1SecurityGroup): ScalewayInstanceV1SecurityGroup {
        return {
            ...val,
            inboundDefaultPolicy: (val.inboundDefaultPolicy) ?? "accept",
            outboundDefaultPolicy: (val.outboundDefaultPolicy) ?? "accept",
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

}

export namespace servers {
    export interface ScalewayInstanceV1Bootscript {
        /**
         * The bootscript arch
         */
        arch?: enums.servers.ScalewayInstanceV1BootscriptArch;
        /**
         * The bootscript arguments
         */
        bootcmdargs?: string;
        /**
         * Dispmay if the bootscript is the default bootscript if no other boot option is configured
         */
        default?: boolean;
        /**
         * Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
         */
        dtb?: string;
        /**
         * The bootscript ID
         */
        id?: string;
        /**
         * The initrd (initial ramdisk) configuration
         */
        initrd?: string;
        /**
         * The server kernel version
         */
        kernel?: string;
        /**
         * The bootscript organization ID
         */
        organization?: string;
        /**
         * The bootscript project ID
         */
        project?: string;
        /**
         * Provide information if the bootscript is public
         */
        public?: boolean;
        /**
         * The bootscript title
         */
        title?: string;
        /**
         * The zone in which is the bootscript
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1BootscriptProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Bootscript
     */
    export function scalewayInstanceV1BootscriptProvideDefaults(val: ScalewayInstanceV1Bootscript): ScalewayInstanceV1Bootscript {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    export interface ScalewayInstanceV1GetPlacementGroupServersResponse {
        servers?: outputs.servers.ScalewayInstanceV1PlacementGroupServer[];
    }

    export interface ScalewayInstanceV1GetServerResponse {
        server?: outputs.servers.ScalewayInstanceV1Server;
    }
    /**
     * scalewayInstanceV1GetServerResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetServerResponse
     */
    export function scalewayInstanceV1GetServerResponseProvideDefaults(val: ScalewayInstanceV1GetServerResponse): ScalewayInstanceV1GetServerResponse {
        return {
            ...val,
            server: (val.server ? outputs.servers.scalewayInstanceV1ServerProvideDefaults(val.server) : undefined),
        };
    }

    export interface ScalewayInstanceV1Image {
        arch?: enums.servers.ScalewayInstanceV1ImageArch;
        /**
         * (RFC 3339 format)
         */
        creationDate?: string;
        defaultBootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
        extraVolumes?: {[key: string]: outputs.servers.ScalewayInstanceV1Volume};
        fromServer?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modificationDate?: string;
        name: string;
        organization?: string;
        project: string;
        public?: boolean;
        rootVolume: outputs.servers.ScalewayInstanceV1VolumeSummary;
        state?: enums.servers.ScalewayInstanceV1ImageState;
        tags?: string[];
        zone?: string;
    }
    /**
     * scalewayInstanceV1ImageProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Image
     */
    export function scalewayInstanceV1ImageProvideDefaults(val: ScalewayInstanceV1Image): ScalewayInstanceV1Image {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            defaultBootscript: (val.defaultBootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.defaultBootscript) : undefined),
            rootVolume: outputs.servers.scalewayInstanceV1VolumeSummaryProvideDefaults(val.rootVolume),
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1ListServersResponse {
        /**
         * List of servers
         */
        servers?: outputs.servers.ScalewayInstanceV1Server[];
    }

    export interface ScalewayInstanceV1ListServersTypesResponse {
        /**
         * List of server types
         */
        servers?: {[key: string]: outputs.servers.ScalewayInstanceV1ServerType};
    }

    export interface ScalewayInstanceV1PlacementGroup {
        id?: string;
        /**
         * The placement group name
         */
        name: string;
        /**
         * The placement group organization ID
         */
        organization?: string;
        policyMode?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyMode;
        /**
         * Returns true if the policy is respected, false otherwise
         */
        policyRespected?: boolean;
        policyType?: enums.servers.ScalewayInstanceV1PlacementGroupPolicyType;
        /**
         * The placement group project ID
         */
        project: string;
        /**
         * The placement group tags
         */
        tags?: string[];
        /**
         * The zone in which is the placement group
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1PlacementGroupProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PlacementGroup
     */
    export function scalewayInstanceV1PlacementGroupProvideDefaults(val: ScalewayInstanceV1PlacementGroup): ScalewayInstanceV1PlacementGroup {
        return {
            ...val,
            policyMode: (val.policyMode) ?? "optional",
            policyType: (val.policyType) ?? "max_availability",
        };
    }

    export interface ScalewayInstanceV1PlacementGroupServer {
        id?: string;
        name?: string;
        policyRespected?: boolean;
    }

    export interface ScalewayInstanceV1PrivateNIC {
        /**
         * The private NIC unique ID
         */
        id?: string;
        /**
         * The private NIC MAC address
         */
        macAddress?: string;
        /**
         * The private network where the private NIC is attached
         */
        privateNetworkId?: string;
        /**
         * The server the private NIC is attached to
         */
        serverId?: string;
        /**
         * The private NIC state
         */
        state?: enums.servers.ScalewayInstanceV1PrivateNICState;
    }
    /**
     * scalewayInstanceV1PrivateNICProvideDefaults sets the appropriate defaults for ScalewayInstanceV1PrivateNIC
     */
    export function scalewayInstanceV1PrivateNICProvideDefaults(val: ScalewayInstanceV1PrivateNIC): ScalewayInstanceV1PrivateNIC {
        return {
            ...val,
            state: (val.state) ?? "available",
        };
    }

    export interface ScalewayInstanceV1Server {
        /**
         * Provide as list of allowed actions on the server
         */
        allowedActions?: enums.servers.ScalewayInstanceV1ServerAllowedActionsItem[];
        /**
         * The server arch
         */
        arch?: enums.servers.ScalewayInstanceV1ServerArch;
        bootType?: enums.servers.ScalewayInstanceV1ServerBootType;
        bootscript?: outputs.servers.ScalewayInstanceV1Bootscript;
        /**
         * The server commercial type (eg. GP1-M)
         */
        commercialType?: string;
        /**
         * The server creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * True if a dynamic IP is required
         */
        dynamicIpRequired?: boolean;
        /**
         * True if IPv6 is enabled
         */
        enableIpv6?: boolean;
        /**
         * The server host name
         */
        hostname?: string;
        /**
         * The server unique ID
         */
        id?: string;
        image?: outputs.servers.ScalewayInstanceV1Image;
        /**
         * The server IPv6 address
         */
        ipv6?: outputs.servers.ScalewayInstanceV1ServerIpv6Properties;
        /**
         * The server location
         */
        location?: outputs.servers.ScalewayInstanceV1ServerLocationProperties;
        /**
         * The server planned maintenances
         */
        maintenances?: outputs.servers.ScalewayInstanceV1ServerMaintenance[];
        /**
         * The server modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The server name
         */
        name?: string;
        /**
         * The server organization ID
         */
        organization?: string;
        placementGroup?: outputs.servers.ScalewayInstanceV1PlacementGroup;
        /**
         * The server private IP address
         */
        privateIp?: string;
        /**
         * The server private NICs
         */
        privateNics?: outputs.servers.ScalewayInstanceV1PrivateNIC[];
        /**
         * The server project ID
         */
        project?: string;
        /**
         * The server protection option is activated
         */
        protected?: boolean;
        /**
         * Information about the public IP
         */
        publicIp?: outputs.servers.ScalewayInstanceV1ServerPublicIpProperties;
        /**
         * The server security group
         */
        securityGroup?: outputs.servers.ScalewayInstanceV1ServerSecurityGroupProperties;
        /**
         * The server state
         */
        state?: enums.servers.ScalewayInstanceV1ServerState;
        /**
         * The server state_detail
         */
        stateDetail?: string;
        /**
         * The server associated tags
         */
        tags?: string[];
        /**
         * The server volumes
         */
        volumes?: {[key: string]: outputs.servers.ScalewayInstanceV1VolumeServer};
        /**
         * The zone in which is the server
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1ServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Server
     */
    export function scalewayInstanceV1ServerProvideDefaults(val: ScalewayInstanceV1Server): ScalewayInstanceV1Server {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
            bootType: (val.bootType) ?? "local",
            bootscript: (val.bootscript ? outputs.servers.scalewayInstanceV1BootscriptProvideDefaults(val.bootscript) : undefined),
            image: (val.image ? outputs.servers.scalewayInstanceV1ImageProvideDefaults(val.image) : undefined),
            placementGroup: (val.placementGroup ? outputs.servers.scalewayInstanceV1PlacementGroupProvideDefaults(val.placementGroup) : undefined),
            state: (val.state) ?? "running",
        };
    }

    /**
     * The server IPv6 address
     */
    export interface ScalewayInstanceV1ServerIpv6Properties {
        /**
         * The server IPv6 IP-Address (IPv6 address)
         */
        address?: string;
        /**
         * The IPv6 IP-addresses gateway (IPv6 address)
         */
        gateway?: string;
        /**
         * The IPv6 IP-addresses CIDR netmask
         */
        netmask?: string;
    }

    /**
     * The server location
     */
    export interface ScalewayInstanceV1ServerLocationProperties {
        clusterId?: string;
        hypervisorId?: string;
        nodeId?: string;
        platformId?: string;
        zoneId?: string;
    }

    export interface ScalewayInstanceV1ServerMaintenance {
    }

    /**
     * Information about the public IP
     */
    export interface ScalewayInstanceV1ServerPublicIpProperties {
        /**
         * The server public IPv4 IP-Address (IPv4 address)
         */
        address?: string;
        /**
         * True if the IP address is dynamic
         */
        dynamic?: boolean;
        /**
         * The unique ID of the IP address
         */
        id?: string;
    }

    /**
     * The server security group
     */
    export interface ScalewayInstanceV1ServerSecurityGroupProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1ServerSummary {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1ServerType {
        /**
         * Alternative instance name if any
         */
        altNames?: string[];
        /**
         * CPU architecture
         */
        arch?: enums.servers.ScalewayInstanceV1ServerTypeArch;
        /**
         * True if it is a baremetal instance
         */
        baremetal?: boolean;
        /**
         * Capabilities
         */
        capabilities?: outputs.servers.ScalewayInstanceV1ServerTypeCapabilitiesProperties;
        /**
         * Number of GPU
         */
        gpu?: number;
        /**
         * Hourly price in Euro
         */
        hourlyPrice?: number;
        /**
         * Estimated monthly price, for a 30 days month, in Euro
         */
        monthlyPrice?: number;
        /**
         * Number of CPU
         */
        ncpus?: number;
        /**
         * Network available for the instance
         */
        network?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkProperties;
        /**
         * Additional volume constraints
         */
        perVolumeConstraint?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintProperties;
        /**
         * Available RAM in bytes
         */
        ram?: number;
        /**
         * Initial volume constraints
         */
        volumesConstraint?: outputs.servers.ScalewayInstanceV1ServerTypeVolumesConstraintProperties;
    }
    /**
     * scalewayInstanceV1ServerTypeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1ServerType
     */
    export function scalewayInstanceV1ServerTypeProvideDefaults(val: ScalewayInstanceV1ServerType): ScalewayInstanceV1ServerType {
        return {
            ...val,
            arch: (val.arch) ?? "x86_64",
        };
    }

    /**
     * Capabilities
     */
    export interface ScalewayInstanceV1ServerTypeCapabilitiesProperties {
        /**
         * True if server supports block storage
         */
        blockStorage?: boolean;
        /**
         * List of supported boot types
         */
        bootTypes?: enums.servers.ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem[];
    }

    export interface ScalewayInstanceV1ServerTypeNetworkInterface {
        /**
         * Maximum internal bandwidth in bits per seconds
         */
        internalBandwidth?: number;
        /**
         * Maximum internet bandwidth in bits per seconds
         */
        internetBandwidth?: number;
    }

    /**
     * Network available for the instance
     */
    export interface ScalewayInstanceV1ServerTypeNetworkProperties {
        /**
         * True if IPv6 is enabled
         */
        _ipv6Support?: boolean;
        /**
         * List of available network interfaces
         */
        interfaces?: outputs.servers.ScalewayInstanceV1ServerTypeNetworkInterface[];
        /**
         * Total maximum internal bandwidth in bits per seconds
         */
        sumInternalBandwidth?: number;
        /**
         * Total maximum internet bandwidth in bits per seconds
         */
        sumInternetBandwidth?: number;
    }

    /**
     * Additional volume constraints
     */
    export interface ScalewayInstanceV1ServerTypePerVolumeConstraintProperties {
        /**
         * Local SSD volumes
         */
        lSsd?: outputs.servers.ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties;
    }

    /**
     * Local SSD volumes
     */
    export interface ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties {
        /**
         * Maximum volume size in bytes (in bytes)
         */
        maxSize?: number;
        /**
         * Minimum volume size in bytes (in bytes)
         */
        minSize?: number;
    }

    /**
     * Initial volume constraints
     */
    export interface ScalewayInstanceV1ServerTypeVolumesConstraintProperties {
        /**
         * Maximum volume size in bytes (in bytes)
         */
        maxSize?: number;
        /**
         * Minimum volume size in bytes (in bytes)
         */
        minSize?: number;
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * Show the volume NBD export URI
         */
        exportUri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.servers.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.servers.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volumeType?: enums.servers.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    export interface ScalewayInstanceV1VolumeServer {
        boot?: boolean;
        /**
         * (RFC 3339 format)
         */
        creationDate?: string;
        exportUri?: string;
        id?: string;
        /**
         * (RFC 3339 format)
         */
        modificationDate?: string;
        name?: string;
        organization?: string;
        project?: string;
        server?: outputs.servers.ScalewayInstanceV1ServerSummary;
        /**
         * (in bytes)
         */
        size?: number;
        state?: enums.servers.ScalewayInstanceV1VolumeServerState;
        volumeType?: enums.servers.ScalewayInstanceV1VolumeServerVolumeType;
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeServerProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServer
     */
    export function scalewayInstanceV1VolumeServerProvideDefaults(val: ScalewayInstanceV1VolumeServer): ScalewayInstanceV1VolumeServer {
        return {
            ...val,
            state: (val.state) ?? "available",
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeServerTemplate {
        /**
         * The ID of the snapshot on which this volume will be based
         */
        baseSnapshot?: string;
        /**
         * Force the server to boot on this volume
         */
        boot?: boolean;
        /**
         * UUID of the volume
         */
        id?: string;
        /**
         * Name of the volume
         */
        name?: string;
        /**
         * Organization ID of the volume
         */
        organization?: string;
        /**
         * Project ID of the volume
         */
        project?: string;
        /**
         * Disk size of the volume, must be a multiple of 512 (in bytes)
         */
        size?: number;
        volumeType?: enums.servers.ServerScalewayInstanceV1VolumeServerTemplateVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeServerTemplateProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeServerTemplate
     */
    export function scalewayInstanceV1VolumeServerTemplateProvideDefaults(val: ScalewayInstanceV1VolumeServerTemplate): ScalewayInstanceV1VolumeServerTemplate {
        return {
            ...val,
            boot: (val.boot) ?? false,
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    export interface ScalewayInstanceV1VolumeSummary {
        id?: string;
        name?: string;
        /**
         * (in bytes)
         */
        size?: number;
        volumeType?: enums.servers.ScalewayInstanceV1VolumeSummaryVolumeType;
    }
    /**
     * scalewayInstanceV1VolumeSummaryProvideDefaults sets the appropriate defaults for ScalewayInstanceV1VolumeSummary
     */
    export function scalewayInstanceV1VolumeSummaryProvideDefaults(val: ScalewayInstanceV1VolumeSummary): ScalewayInstanceV1VolumeSummary {
        return {
            ...val,
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

}

export namespace snapshot_export {
    export interface ScalewayInstanceV1Task {
        /**
         * The description of the task
         */
        description?: string;
        hrefFrom?: string;
        hrefResult?: string;
        /**
         * The unique ID of the task
         */
        id?: string;
        /**
         * The progress of the task in percent
         */
        progress?: number;
        /**
         * The task start date (RFC 3339 format)
         */
        startedAt?: string;
        /**
         * The task status
         */
        status?: enums.snapshot_export.ExportSnapshotScalewayInstanceV1TaskStatus;
        /**
         * The task end date (RFC 3339 format)
         */
        terminatedAt?: string;
        /**
         * The zone in which is the task
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1TaskProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Task
     */
    export function scalewayInstanceV1TaskProvideDefaults(val: ScalewayInstanceV1Task): ScalewayInstanceV1Task {
        return {
            ...val,
            status: (val.status) ?? "pending",
        };
    }

}

export namespace snapshots {
    /**
     * The volume on which the snapshot is based on
     */
    export interface BaseVolumeProperties {
        /**
         * The volume ID on which the snapshot is based on
         */
        id?: string;
        /**
         * The volume name on which the snapshot is based on
         */
        name?: string;
    }

    export interface ScalewayInstanceV1GetSnapshotResponse {
        snapshot?: outputs.snapshots.ScalewayInstanceV1Snapshot;
    }
    /**
     * scalewayInstanceV1GetSnapshotResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetSnapshotResponse
     */
    export function scalewayInstanceV1GetSnapshotResponseProvideDefaults(val: ScalewayInstanceV1GetSnapshotResponse): ScalewayInstanceV1GetSnapshotResponse {
        return {
            ...val,
            snapshot: (val.snapshot ? outputs.snapshots.scalewayInstanceV1SnapshotProvideDefaults(val.snapshot) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListSnapshotsResponse {
        /**
         * List of snapshots
         */
        snapshots?: outputs.snapshots.ScalewayInstanceV1Snapshot[];
    }

    export interface ScalewayInstanceV1Snapshot {
        /**
         * The volume on which the snapshot is based on
         */
        baseVolume?: outputs.snapshots.ScalewayInstanceV1SnapshotBaseVolumeProperties;
        /**
         * The snapshot creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * The reason for the failed snapshot import
         */
        errorReason?: string;
        id?: string;
        /**
         * The snapshot modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The snapshot name
         */
        name?: string;
        /**
         * The snapshot organization ID
         */
        organization?: string;
        /**
         * The snapshot project ID
         */
        project?: string;
        /**
         * The snapshot size (in bytes)
         */
        size?: number;
        state?: enums.snapshots.ScalewayInstanceV1SnapshotState;
        /**
         * The snapshot tags
         */
        tags?: string[];
        volumeType?: enums.snapshots.ScalewayInstanceV1SnapshotVolumeType;
        /**
         * The snapshot zone
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1SnapshotProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Snapshot
     */
    export function scalewayInstanceV1SnapshotProvideDefaults(val: ScalewayInstanceV1Snapshot): ScalewayInstanceV1Snapshot {
        return {
            ...val,
            state: (val.state) ?? "available",
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    /**
     * The volume on which the snapshot is based on
     */
    export interface ScalewayInstanceV1SnapshotBaseVolumeProperties {
        /**
         * The volume ID on which the snapshot is based on
         */
        id?: string;
        /**
         * The volume name on which the snapshot is based on
         */
        name?: string;
    }

    export interface ScalewayInstanceV1Task {
        /**
         * The description of the task
         */
        description?: string;
        hrefFrom?: string;
        hrefResult?: string;
        /**
         * The unique ID of the task
         */
        id?: string;
        /**
         * The progress of the task in percent
         */
        progress?: number;
        /**
         * The task start date (RFC 3339 format)
         */
        startedAt?: string;
        /**
         * The task status
         */
        status?: enums.snapshots.SnapshotScalewayInstanceV1TaskStatus;
        /**
         * The task end date (RFC 3339 format)
         */
        terminatedAt?: string;
        /**
         * The zone in which is the task
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1TaskProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Task
     */
    export function scalewayInstanceV1TaskProvideDefaults(val: ScalewayInstanceV1Task): ScalewayInstanceV1Task {
        return {
            ...val,
            status: (val.status) ?? "pending",
        };
    }

}

export namespace user_data {
    export interface ScalewayInstanceV1ListServerUserDataResponse {
        userData?: string[];
    }

    export interface ScalewayStdFile {
        content?: string;
        contentType?: string;
        name?: string;
    }

}

export namespace volumes {
    export interface ScalewayInstanceV1GetVolumeResponse {
        volume?: outputs.volumes.ScalewayInstanceV1Volume;
    }
    /**
     * scalewayInstanceV1GetVolumeResponseProvideDefaults sets the appropriate defaults for ScalewayInstanceV1GetVolumeResponse
     */
    export function scalewayInstanceV1GetVolumeResponseProvideDefaults(val: ScalewayInstanceV1GetVolumeResponse): ScalewayInstanceV1GetVolumeResponse {
        return {
            ...val,
            volume: (val.volume ? outputs.volumes.scalewayInstanceV1VolumeProvideDefaults(val.volume) : undefined),
        };
    }

    export interface ScalewayInstanceV1ListVolumesResponse {
        /**
         * List of volumes
         */
        volumes?: outputs.volumes.ScalewayInstanceV1Volume[];
    }

    export interface ScalewayInstanceV1ListVolumesTypesResponse {
        /**
         * Map of volume types
         */
        volumes?: {[key: string]: outputs.volumes.ScalewayInstanceV1VolumeType};
    }

    export interface ScalewayInstanceV1Volume {
        /**
         * The volume creation date (RFC 3339 format)
         */
        creationDate?: string;
        /**
         * Show the volume NBD export URI
         */
        exportUri?: string;
        id?: string;
        /**
         * The volume modification date (RFC 3339 format)
         */
        modificationDate?: string;
        /**
         * The volume name
         */
        name: string;
        /**
         * The volume organization ID
         */
        organization?: string;
        /**
         * The volume project ID
         */
        project: string;
        /**
         * The server attached to the volume
         */
        server?: outputs.volumes.ScalewayInstanceV1VolumeServerProperties;
        /**
         * The volume disk size (in bytes)
         */
        size?: number;
        state?: enums.volumes.ScalewayInstanceV1VolumeState;
        /**
         * The volume tags
         */
        tags?: string[];
        volumeType?: enums.volumes.ScalewayInstanceV1VolumeVolumeType;
        /**
         * The zone in which is the volume
         */
        zone?: string;
    }
    /**
     * scalewayInstanceV1VolumeProvideDefaults sets the appropriate defaults for ScalewayInstanceV1Volume
     */
    export function scalewayInstanceV1VolumeProvideDefaults(val: ScalewayInstanceV1Volume): ScalewayInstanceV1Volume {
        return {
            ...val,
            state: (val.state) ?? "available",
            volumeType: (val.volumeType) ?? "l_ssd",
        };
    }

    /**
     * The server attached to the volume
     */
    export interface ScalewayInstanceV1VolumeServerProperties {
        id?: string;
        name?: string;
    }

    export interface ScalewayInstanceV1VolumeType {
        capabilities?: outputs.volumes.ScalewayInstanceV1VolumeTypeCapabilities;
        constraints?: outputs.volumes.ScalewayInstanceV1VolumeTypeConstraints;
        displayName?: string;
    }

    export interface ScalewayInstanceV1VolumeTypeCapabilities {
        snapshot?: boolean;
    }

    export interface ScalewayInstanceV1VolumeTypeConstraints {
        /**
         * (in bytes)
         */
        max?: number;
        /**
         * (in bytes)
         */
        min?: number;
    }

    /**
     * The server attached to the volume
     */
    export interface ServerProperties {
        id?: string;
        name?: string;
    }

}
