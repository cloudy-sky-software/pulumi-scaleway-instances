// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway-instances:servers:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * The boot type to use
     */
    public readonly bootType!: pulumi.Output<enums.servers.BootType | undefined>;
    /**
     * The bootscript ID to use when `boot_type` is set to `bootscript`
     */
    public readonly bootscript!: pulumi.Output<string | undefined>;
    /**
     * Define the server commercial type (i.e. GP1-S)
     */
    public readonly commercialType!: pulumi.Output<string>;
    /**
     * Define if a dynamic IP is required for the instance
     */
    public readonly dynamicIpRequired!: pulumi.Output<boolean | undefined>;
    /**
     * True if IPv6 is enabled on the server
     */
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * The server image ID
     */
    public readonly image!: pulumi.Output<string | undefined>;
    /**
     * The server name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The server organization ID
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * Placement group ID if server must be part of a placement group
     */
    public readonly placementGroup!: pulumi.Output<string | undefined>;
    /**
     * The server project ID
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * The ID of the reserved IP to attach to the server
     */
    public readonly publicIp!: pulumi.Output<string | undefined>;
    /**
     * The security group ID
     */
    public readonly securityGroup!: pulumi.Output<string | undefined>;
    public /*out*/ readonly server!: pulumi.Output<outputs.servers.ScalewayInstanceV1Server | undefined>;
    /**
     * The server tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly volumes!: pulumi.Output<{[key: string]: outputs.servers.ScalewayInstanceV1VolumeServerTemplate} | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.commercialType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commercialType'");
            }
            resourceInputs["bootType"] = (args ? args.bootType : undefined) ?? "local";
            resourceInputs["bootscript"] = args ? args.bootscript : undefined;
            resourceInputs["commercialType"] = args ? args.commercialType : undefined;
            resourceInputs["dynamicIpRequired"] = args ? args.dynamicIpRequired : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["placementGroup"] = args ? args.placementGroup : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["securityGroup"] = args ? args.securityGroup : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["server"] = undefined /*out*/;
        } else {
            resourceInputs["bootType"] = undefined /*out*/;
            resourceInputs["bootscript"] = undefined /*out*/;
            resourceInputs["commercialType"] = undefined /*out*/;
            resourceInputs["dynamicIpRequired"] = undefined /*out*/;
            resourceInputs["enableIpv6"] = undefined /*out*/;
            resourceInputs["image"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["placementGroup"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["securityGroup"] = undefined /*out*/;
            resourceInputs["server"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["volumes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * The boot type to use
     */
    bootType?: pulumi.Input<enums.servers.BootType>;
    /**
     * The bootscript ID to use when `boot_type` is set to `bootscript`
     */
    bootscript?: pulumi.Input<string>;
    /**
     * Define the server commercial type (i.e. GP1-S)
     */
    commercialType: pulumi.Input<string>;
    /**
     * Define if a dynamic IP is required for the instance
     */
    dynamicIpRequired?: pulumi.Input<boolean>;
    /**
     * True if IPv6 is enabled on the server
     */
    enableIpv6?: pulumi.Input<boolean>;
    /**
     * The server image ID
     */
    image?: pulumi.Input<string>;
    /**
     * The server name
     */
    name?: pulumi.Input<string>;
    /**
     * The server organization ID
     */
    organization?: pulumi.Input<string>;
    /**
     * Placement group ID if server must be part of a placement group
     */
    placementGroup?: pulumi.Input<string>;
    /**
     * The server project ID
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the reserved IP to attach to the server
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The security group ID
     */
    securityGroup?: pulumi.Input<string>;
    /**
     * The server tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    volumes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.servers.ScalewayInstanceV1VolumeServerTemplateArgs>}>;
    /**
     * The zone you want to target
     */
    zone?: pulumi.Input<string>;
}
