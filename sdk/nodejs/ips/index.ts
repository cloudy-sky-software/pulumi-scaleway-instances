// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetIpArgs, GetIpOutputArgs } from "./getIp";
export const getIp: typeof import("./getIp").getIp = null as any;
export const getIpOutput: typeof import("./getIp").getIpOutput = null as any;
utilities.lazyLoad(exports, ["getIp","getIpOutput"], () => require("./getIp"));

export { IpArgs } from "./ip";
export type Ip = import("./ip").Ip;
export const Ip: typeof import("./ip").Ip = null as any;
utilities.lazyLoad(exports, ["Ip"], () => require("./ip"));

export { ListIpsArgs, ListIpsOutputArgs } from "./listIps";
export const listIps: typeof import("./listIps").listIps = null as any;
export const listIpsOutput: typeof import("./listIps").listIpsOutput = null as any;
utilities.lazyLoad(exports, ["listIps","listIpsOutput"], () => require("./listIps"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scaleway-instances:ips:Ip":
                return new Ip(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scaleway-instances", "ips", _module)
