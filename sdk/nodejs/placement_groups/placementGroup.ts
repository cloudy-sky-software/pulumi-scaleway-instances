// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class PlacementGroup extends pulumi.CustomResource {
    /**
     * Get an existing PlacementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PlacementGroup {
        return new PlacementGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway-instances:placement_groups:PlacementGroup';

    /**
     * Returns true if the given object is an instance of PlacementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlacementGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlacementGroup.__pulumiType;
    }

    /**
     * The placement group name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The placement group organization ID
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly placementGroup!: pulumi.Output<outputs.placement_groups.ScalewayInstanceV1PlacementGroup | undefined>;
    public readonly policyMode!: pulumi.Output<enums.placement_groups.PlacementGroupPolicyMode | undefined>;
    /**
     * Returns true if the policy is respected, false otherwise
     */
    public /*out*/ readonly policyRespected!: pulumi.Output<boolean | undefined>;
    public readonly policyType!: pulumi.Output<enums.placement_groups.PlacementGroupPolicyType | undefined>;
    /**
     * The placement group project ID
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The placement group tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The zone in which is the placement group
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a PlacementGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlacementGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["policyMode"] = (args ? args.policyMode : undefined) ?? "optional";
            resourceInputs["policyType"] = (args ? args.policyType : undefined) ?? "max_availability";
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["placementGroup"] = undefined /*out*/;
            resourceInputs["policyRespected"] = undefined /*out*/;
        } else {
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["placementGroup"] = undefined /*out*/;
            resourceInputs["policyMode"] = undefined /*out*/;
            resourceInputs["policyRespected"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlacementGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PlacementGroup resource.
 */
export interface PlacementGroupArgs {
    /**
     * The placement group name
     */
    name?: pulumi.Input<string>;
    /**
     * The placement group organization ID
     */
    organization?: pulumi.Input<string>;
    policyMode?: pulumi.Input<enums.placement_groups.PlacementGroupPolicyMode>;
    policyType?: pulumi.Input<enums.placement_groups.PlacementGroupPolicyType>;
    /**
     * The placement group project ID
     */
    project: pulumi.Input<string>;
    /**
     * The placement group tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zone you want to target
     */
    zone?: pulumi.Input<string>;
}
