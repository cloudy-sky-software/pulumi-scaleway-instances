# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ScalewayInstanceV1Bootscript',
    'ScalewayInstanceV1GetPlacementGroupServersResponse',
    'ScalewayInstanceV1GetServerResponse',
    'ScalewayInstanceV1Image',
    'ScalewayInstanceV1ListServersResponse',
    'ScalewayInstanceV1ListServersTypesResponse',
    'ScalewayInstanceV1PlacementGroup',
    'ScalewayInstanceV1PlacementGroupServer',
    'ScalewayInstanceV1PrivateNIC',
    'ScalewayInstanceV1Server',
    'ScalewayInstanceV1ServerIpv6Properties',
    'ScalewayInstanceV1ServerLocationProperties',
    'ScalewayInstanceV1ServerMaintenance',
    'ScalewayInstanceV1ServerPublicIpProperties',
    'ScalewayInstanceV1ServerSecurityGroupProperties',
    'ScalewayInstanceV1ServerSummary',
    'ScalewayInstanceV1ServerType',
    'ScalewayInstanceV1ServerTypeCapabilitiesProperties',
    'ScalewayInstanceV1ServerTypeNetworkInterface',
    'ScalewayInstanceV1ServerTypeNetworkProperties',
    'ScalewayInstanceV1ServerTypePerVolumeConstraintProperties',
    'ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties',
    'ScalewayInstanceV1ServerTypeVolumesConstraintProperties',
    'ScalewayInstanceV1Volume',
    'ScalewayInstanceV1VolumeServer',
    'ScalewayInstanceV1VolumeServerProperties',
    'ScalewayInstanceV1VolumeServerTemplate',
    'ScalewayInstanceV1VolumeSummary',
]

@pulumi.output_type
class ScalewayInstanceV1Bootscript(dict):
    def __init__(__self__, *,
                 arch: Optional['ScalewayInstanceV1BootscriptArch'] = None,
                 bootcmdargs: Optional[str] = None,
                 default: Optional[bool] = None,
                 dtb: Optional[str] = None,
                 id: Optional[str] = None,
                 initrd: Optional[str] = None,
                 kernel: Optional[str] = None,
                 organization: Optional[str] = None,
                 project: Optional[str] = None,
                 public: Optional[bool] = None,
                 title: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param 'ScalewayInstanceV1BootscriptArch' arch: The bootscript arch
        :param str bootcmdargs: The bootscript arguments
        :param bool default: Dispmay if the bootscript is the default bootscript if no other boot option is configured
        :param str dtb: Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
        :param str id: The bootscript ID
        :param str initrd: The initrd (initial ramdisk) configuration
        :param str kernel: The server kernel version
        :param str organization: The bootscript organization ID
        :param str project: The bootscript project ID
        :param bool public: Provide information if the bootscript is public
        :param str title: The bootscript title
        :param str zone: The zone in which is the bootscript
        """
        if arch is None:
            arch = 'x86_64'
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if bootcmdargs is not None:
            pulumi.set(__self__, "bootcmdargs", bootcmdargs)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dtb is not None:
            pulumi.set(__self__, "dtb", dtb)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initrd is not None:
            pulumi.set(__self__, "initrd", initrd)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def arch(self) -> Optional['ScalewayInstanceV1BootscriptArch']:
        """
        The bootscript arch
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def bootcmdargs(self) -> Optional[str]:
        """
        The bootscript arguments
        """
        return pulumi.get(self, "bootcmdargs")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        Dispmay if the bootscript is the default bootscript if no other boot option is configured
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def dtb(self) -> Optional[str]:
        """
        Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
        """
        return pulumi.get(self, "dtb")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The bootscript ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def initrd(self) -> Optional[str]:
        """
        The initrd (initial ramdisk) configuration
        """
        return pulumi.get(self, "initrd")

    @property
    @pulumi.getter
    def kernel(self) -> Optional[str]:
        """
        The server kernel version
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        The bootscript organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The bootscript project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        """
        Provide information if the bootscript is public
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The bootscript title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The zone in which is the bootscript
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1GetPlacementGroupServersResponse(dict):
    def __init__(__self__, *,
                 servers: Optional[Sequence['outputs.ScalewayInstanceV1PlacementGroupServer']] = None):
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.ScalewayInstanceV1PlacementGroupServer']]:
        return pulumi.get(self, "servers")


@pulumi.output_type
class ScalewayInstanceV1GetServerResponse(dict):
    def __init__(__self__, *,
                 server: Optional['outputs.ScalewayInstanceV1Server'] = None):
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.ScalewayInstanceV1Server']:
        return pulumi.get(self, "server")


@pulumi.output_type
class ScalewayInstanceV1Image(dict):
    def __init__(__self__, *,
                 arch: Optional['ScalewayInstanceV1ImageArch'] = None,
                 creation_date: Optional[str] = None,
                 default_bootscript: Optional['outputs.ScalewayInstanceV1Bootscript'] = None,
                 extra_volumes: Optional[Mapping[str, 'outputs.ScalewayInstanceV1Volume']] = None,
                 from_server: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 project: Optional[str] = None,
                 public: Optional[bool] = None,
                 root_volume: Optional['outputs.ScalewayInstanceV1VolumeSummary'] = None,
                 state: Optional['ScalewayInstanceV1ImageState'] = None,
                 tags: Optional[Sequence[str]] = None,
                 zone: Optional[str] = None):
        """
        :param str creation_date: (RFC 3339 format)
        :param str modification_date: (RFC 3339 format)
        """
        if arch is None:
            arch = 'x86_64'
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if default_bootscript is not None:
            pulumi.set(__self__, "default_bootscript", default_bootscript)
        if extra_volumes is not None:
            pulumi.set(__self__, "extra_volumes", extra_volumes)
        if from_server is not None:
            pulumi.set(__self__, "from_server", from_server)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if root_volume is not None:
            pulumi.set(__self__, "root_volume", root_volume)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def arch(self) -> Optional['ScalewayInstanceV1ImageArch']:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[str]:
        """
        (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def default_bootscript(self) -> Optional['outputs.ScalewayInstanceV1Bootscript']:
        return pulumi.get(self, "default_bootscript")

    @property
    @pulumi.getter
    def extra_volumes(self) -> Optional[Mapping[str, 'outputs.ScalewayInstanceV1Volume']]:
        return pulumi.get(self, "extra_volumes")

    @property
    @pulumi.getter
    def from_server(self) -> Optional[str]:
        return pulumi.get(self, "from_server")

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[str]:
        """
        (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def public(self) -> Optional[bool]:
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def root_volume(self) -> Optional['outputs.ScalewayInstanceV1VolumeSummary']:
        return pulumi.get(self, "root_volume")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1ImageState']:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1ListServersResponse(dict):
    def __init__(__self__, *,
                 servers: Optional[Sequence['outputs.ScalewayInstanceV1Server']] = None):
        """
        :param Sequence['ScalewayInstanceV1Server'] servers: List of servers
        """
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.ScalewayInstanceV1Server']]:
        """
        List of servers
        """
        return pulumi.get(self, "servers")


@pulumi.output_type
class ScalewayInstanceV1ListServersTypesResponse(dict):
    def __init__(__self__, *,
                 servers: Optional[Mapping[str, 'outputs.ScalewayInstanceV1ServerType']] = None):
        """
        :param Mapping[str, 'ScalewayInstanceV1ServerType'] servers: List of server types
        """
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def servers(self) -> Optional[Mapping[str, 'outputs.ScalewayInstanceV1ServerType']]:
        """
        List of server types
        """
        return pulumi.get(self, "servers")


@pulumi.output_type
class ScalewayInstanceV1PlacementGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 policy_mode: Optional['ScalewayInstanceV1PlacementGroupPolicyMode'] = None,
                 policy_respected: Optional[bool] = None,
                 policy_type: Optional['ScalewayInstanceV1PlacementGroupPolicyType'] = None,
                 project: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 zone: Optional[str] = None):
        """
        :param str name: The placement group name
        :param str organization: The placement group organization ID
        :param bool policy_respected: Returns true if the policy is respected, false otherwise
        :param str project: The placement group project ID
        :param Sequence[str] tags: The placement group tags
        :param str zone: The zone in which is the placement group
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if policy_mode is None:
            policy_mode = 'optional'
        if policy_mode is not None:
            pulumi.set(__self__, "policy_mode", policy_mode)
        if policy_respected is not None:
            pulumi.set(__self__, "policy_respected", policy_respected)
        if policy_type is None:
            policy_type = 'max_availability'
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The placement group name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        The placement group organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def policy_mode(self) -> Optional['ScalewayInstanceV1PlacementGroupPolicyMode']:
        return pulumi.get(self, "policy_mode")

    @property
    @pulumi.getter
    def policy_respected(self) -> Optional[bool]:
        """
        Returns true if the policy is respected, false otherwise
        """
        return pulumi.get(self, "policy_respected")

    @property
    @pulumi.getter
    def policy_type(self) -> Optional['ScalewayInstanceV1PlacementGroupPolicyType']:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The placement group project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The placement group tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The zone in which is the placement group
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1PlacementGroupServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 policy_respected: Optional[bool] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_respected is not None:
            pulumi.set(__self__, "policy_respected", policy_respected)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy_respected(self) -> Optional[bool]:
        return pulumi.get(self, "policy_respected")


@pulumi.output_type
class ScalewayInstanceV1PrivateNIC(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 private_network_id: Optional[str] = None,
                 server_id: Optional[str] = None,
                 state: Optional['ScalewayInstanceV1PrivateNICState'] = None):
        """
        :param str id: The private NIC unique ID
        :param str mac_address: The private NIC MAC address
        :param str private_network_id: The private network where the private NIC is attached
        :param str server_id: The server the private NIC is attached to
        :param 'ScalewayInstanceV1PrivateNICState' state: The private NIC state
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if private_network_id is not None:
            pulumi.set(__self__, "private_network_id", private_network_id)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The private NIC unique ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac_address(self) -> Optional[str]:
        """
        The private NIC MAC address
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def private_network_id(self) -> Optional[str]:
        """
        The private network where the private NIC is attached
        """
        return pulumi.get(self, "private_network_id")

    @property
    @pulumi.getter
    def server_id(self) -> Optional[str]:
        """
        The server the private NIC is attached to
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1PrivateNICState']:
        """
        The private NIC state
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ScalewayInstanceV1Server(dict):
    def __init__(__self__, *,
                 allowed_actions: Optional[Sequence['ScalewayInstanceV1ServerAllowedActionsItem']] = None,
                 arch: Optional['ScalewayInstanceV1ServerArch'] = None,
                 boot_type: Optional['ScalewayInstanceV1ServerBootType'] = None,
                 bootscript: Optional['outputs.ScalewayInstanceV1Bootscript'] = None,
                 commercial_type: Optional[str] = None,
                 creation_date: Optional[str] = None,
                 dynamic_ip_required: Optional[bool] = None,
                 enable_ipv6: Optional[bool] = None,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 image: Optional['outputs.ScalewayInstanceV1Image'] = None,
                 ipv6: Optional['outputs.ScalewayInstanceV1ServerIpv6Properties'] = None,
                 location: Optional['outputs.ScalewayInstanceV1ServerLocationProperties'] = None,
                 maintenances: Optional[Sequence['outputs.ScalewayInstanceV1ServerMaintenance']] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 placement_group: Optional['outputs.ScalewayInstanceV1PlacementGroup'] = None,
                 private_ip: Optional[str] = None,
                 private_nics: Optional[Sequence['outputs.ScalewayInstanceV1PrivateNIC']] = None,
                 project: Optional[str] = None,
                 protected: Optional[bool] = None,
                 public_ip: Optional['outputs.ScalewayInstanceV1ServerPublicIpProperties'] = None,
                 security_group: Optional['outputs.ScalewayInstanceV1ServerSecurityGroupProperties'] = None,
                 state: Optional['ScalewayInstanceV1ServerState'] = None,
                 state_detail: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 volumes: Optional[Mapping[str, 'outputs.ScalewayInstanceV1VolumeServer']] = None,
                 zone: Optional[str] = None):
        """
        :param Sequence['ScalewayInstanceV1ServerAllowedActionsItem'] allowed_actions: Provide as list of allowed actions on the server
        :param 'ScalewayInstanceV1ServerArch' arch: The server arch
        :param str commercial_type: The server commercial type (eg. GP1-M)
        :param str creation_date: The server creation date (RFC 3339 format)
        :param bool dynamic_ip_required: True if a dynamic IP is required
        :param bool enable_ipv6: True if IPv6 is enabled
        :param str hostname: The server host name
        :param str id: The server unique ID
        :param 'ScalewayInstanceV1ServerIpv6Properties' ipv6: The server IPv6 address
        :param 'ScalewayInstanceV1ServerLocationProperties' location: The server location
        :param Sequence['ScalewayInstanceV1ServerMaintenance'] maintenances: The server planned maintenances
        :param str modification_date: The server modification date (RFC 3339 format)
        :param str name: The server name
        :param str organization: The server organization ID
        :param str private_ip: The server private IP address
        :param Sequence['ScalewayInstanceV1PrivateNIC'] private_nics: The server private NICs
        :param str project: The server project ID
        :param bool protected: The server protection option is activated
        :param 'ScalewayInstanceV1ServerPublicIpProperties' public_ip: Information about the public IP
        :param 'ScalewayInstanceV1ServerSecurityGroupProperties' security_group: The server security group
        :param 'ScalewayInstanceV1ServerState' state: The server state
        :param str state_detail: The server state_detail
        :param Sequence[str] tags: The server associated tags
        :param Mapping[str, 'ScalewayInstanceV1VolumeServer'] volumes: The server volumes
        :param str zone: The zone in which is the server
        """
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if arch is None:
            arch = 'x86_64'
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if boot_type is None:
            boot_type = 'local'
        if boot_type is not None:
            pulumi.set(__self__, "boot_type", boot_type)
        if bootscript is not None:
            pulumi.set(__self__, "bootscript", bootscript)
        if commercial_type is not None:
            pulumi.set(__self__, "commercial_type", commercial_type)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if dynamic_ip_required is not None:
            pulumi.set(__self__, "dynamic_ip_required", dynamic_ip_required)
        if enable_ipv6 is not None:
            pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maintenances is not None:
            pulumi.set(__self__, "maintenances", maintenances)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if placement_group is not None:
            pulumi.set(__self__, "placement_group", placement_group)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_nics is not None:
            pulumi.set(__self__, "private_nics", private_nics)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if protected is not None:
            pulumi.set(__self__, "protected", protected)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if state is None:
            state = 'running'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_detail is not None:
            pulumi.set(__self__, "state_detail", state_detail)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def allowed_actions(self) -> Optional[Sequence['ScalewayInstanceV1ServerAllowedActionsItem']]:
        """
        Provide as list of allowed actions on the server
        """
        return pulumi.get(self, "allowed_actions")

    @property
    @pulumi.getter
    def arch(self) -> Optional['ScalewayInstanceV1ServerArch']:
        """
        The server arch
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def boot_type(self) -> Optional['ScalewayInstanceV1ServerBootType']:
        return pulumi.get(self, "boot_type")

    @property
    @pulumi.getter
    def bootscript(self) -> Optional['outputs.ScalewayInstanceV1Bootscript']:
        return pulumi.get(self, "bootscript")

    @property
    @pulumi.getter
    def commercial_type(self) -> Optional[str]:
        """
        The server commercial type (eg. GP1-M)
        """
        return pulumi.get(self, "commercial_type")

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[str]:
        """
        The server creation date (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def dynamic_ip_required(self) -> Optional[bool]:
        """
        True if a dynamic IP is required
        """
        return pulumi.get(self, "dynamic_ip_required")

    @property
    @pulumi.getter
    def enable_ipv6(self) -> Optional[bool]:
        """
        True if IPv6 is enabled
        """
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        The server host name
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The server unique ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.ScalewayInstanceV1Image']:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional['outputs.ScalewayInstanceV1ServerIpv6Properties']:
        """
        The server IPv6 address
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.ScalewayInstanceV1ServerLocationProperties']:
        """
        The server location
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maintenances(self) -> Optional[Sequence['outputs.ScalewayInstanceV1ServerMaintenance']]:
        """
        The server planned maintenances
        """
        return pulumi.get(self, "maintenances")

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[str]:
        """
        The server modification date (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The server name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        The server organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def placement_group(self) -> Optional['outputs.ScalewayInstanceV1PlacementGroup']:
        return pulumi.get(self, "placement_group")

    @property
    @pulumi.getter
    def private_ip(self) -> Optional[str]:
        """
        The server private IP address
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def private_nics(self) -> Optional[Sequence['outputs.ScalewayInstanceV1PrivateNIC']]:
        """
        The server private NICs
        """
        return pulumi.get(self, "private_nics")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The server project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def protected(self) -> Optional[bool]:
        """
        The server protection option is activated
        """
        return pulumi.get(self, "protected")

    @property
    @pulumi.getter
    def public_ip(self) -> Optional['outputs.ScalewayInstanceV1ServerPublicIpProperties']:
        """
        Information about the public IP
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def security_group(self) -> Optional['outputs.ScalewayInstanceV1ServerSecurityGroupProperties']:
        """
        The server security group
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1ServerState']:
        """
        The server state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def state_detail(self) -> Optional[str]:
        """
        The server state_detail
        """
        return pulumi.get(self, "state_detail")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The server associated tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Mapping[str, 'outputs.ScalewayInstanceV1VolumeServer']]:
        """
        The server volumes
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The zone in which is the server
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1ServerIpv6Properties(dict):
    """
    The server IPv6 address
    """
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 gateway: Optional[str] = None,
                 netmask: Optional[str] = None):
        """
        The server IPv6 address
        :param str address: The server IPv6 IP-Address (IPv6 address)
        :param str gateway: The IPv6 IP-addresses gateway (IPv6 address)
        :param str netmask: The IPv6 IP-addresses CIDR netmask
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The server IPv6 IP-Address (IPv6 address)
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The IPv6 IP-addresses gateway (IPv6 address)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        The IPv6 IP-addresses CIDR netmask
        """
        return pulumi.get(self, "netmask")


@pulumi.output_type
class ScalewayInstanceV1ServerLocationProperties(dict):
    """
    The server location
    """
    def __init__(__self__, *,
                 cluster_id: Optional[str] = None,
                 hypervisor_id: Optional[str] = None,
                 node_id: Optional[str] = None,
                 platform_id: Optional[str] = None,
                 zone_id: Optional[str] = None):
        """
        The server location
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if hypervisor_id is not None:
            pulumi.set(__self__, "hypervisor_id", hypervisor_id)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hypervisor_id(self) -> Optional[str]:
        return pulumi.get(self, "hypervisor_id")

    @property
    @pulumi.getter
    def node_id(self) -> Optional[str]:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def platform_id(self) -> Optional[str]:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ScalewayInstanceV1ServerMaintenance(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ScalewayInstanceV1ServerPublicIpProperties(dict):
    """
    Information about the public IP
    """
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 dynamic: Optional[bool] = None,
                 id: Optional[str] = None):
        """
        Information about the public IP
        :param str address: The server public IPv4 IP-Address (IPv4 address)
        :param bool dynamic: True if the IP address is dynamic
        :param str id: The unique ID of the IP address
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The server public IPv4 IP-Address (IPv4 address)
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[bool]:
        """
        True if the IP address is dynamic
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique ID of the IP address
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ScalewayInstanceV1ServerSecurityGroupProperties(dict):
    """
    The server security group
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The server security group
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ScalewayInstanceV1ServerSummary(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ScalewayInstanceV1ServerType(dict):
    def __init__(__self__, *,
                 alt_names: Optional[Sequence[str]] = None,
                 arch: Optional['ScalewayInstanceV1ServerTypeArch'] = None,
                 baremetal: Optional[bool] = None,
                 capabilities: Optional['outputs.ScalewayInstanceV1ServerTypeCapabilitiesProperties'] = None,
                 gpu: Optional[float] = None,
                 hourly_price: Optional[float] = None,
                 monthly_price: Optional[float] = None,
                 ncpus: Optional[float] = None,
                 network: Optional['outputs.ScalewayInstanceV1ServerTypeNetworkProperties'] = None,
                 per_volume_constraint: Optional['outputs.ScalewayInstanceV1ServerTypePerVolumeConstraintProperties'] = None,
                 ram: Optional[float] = None,
                 volumes_constraint: Optional['outputs.ScalewayInstanceV1ServerTypeVolumesConstraintProperties'] = None):
        """
        :param Sequence[str] alt_names: Alternative instance name if any
        :param 'ScalewayInstanceV1ServerTypeArch' arch: CPU architecture
        :param bool baremetal: True if it is a baremetal instance
        :param 'ScalewayInstanceV1ServerTypeCapabilitiesProperties' capabilities: Capabilities
        :param float gpu: Number of GPU
        :param float hourly_price: Hourly price in Euro
        :param float monthly_price: Estimated monthly price, for a 30 days month, in Euro
        :param float ncpus: Number of CPU
        :param 'ScalewayInstanceV1ServerTypeNetworkProperties' network: Network available for the instance
        :param 'ScalewayInstanceV1ServerTypePerVolumeConstraintProperties' per_volume_constraint: Additional volume constraints
        :param float ram: Available RAM in bytes
        :param 'ScalewayInstanceV1ServerTypeVolumesConstraintProperties' volumes_constraint: Initial volume constraints
        """
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if arch is None:
            arch = 'x86_64'
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if baremetal is not None:
            pulumi.set(__self__, "baremetal", baremetal)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if hourly_price is not None:
            pulumi.set(__self__, "hourly_price", hourly_price)
        if monthly_price is not None:
            pulumi.set(__self__, "monthly_price", monthly_price)
        if ncpus is not None:
            pulumi.set(__self__, "ncpus", ncpus)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if per_volume_constraint is not None:
            pulumi.set(__self__, "per_volume_constraint", per_volume_constraint)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if volumes_constraint is not None:
            pulumi.set(__self__, "volumes_constraint", volumes_constraint)

    @property
    @pulumi.getter
    def alt_names(self) -> Optional[Sequence[str]]:
        """
        Alternative instance name if any
        """
        return pulumi.get(self, "alt_names")

    @property
    @pulumi.getter
    def arch(self) -> Optional['ScalewayInstanceV1ServerTypeArch']:
        """
        CPU architecture
        """
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def baremetal(self) -> Optional[bool]:
        """
        True if it is a baremetal instance
        """
        return pulumi.get(self, "baremetal")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.ScalewayInstanceV1ServerTypeCapabilitiesProperties']:
        """
        Capabilities
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def gpu(self) -> Optional[float]:
        """
        Number of GPU
        """
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter
    def hourly_price(self) -> Optional[float]:
        """
        Hourly price in Euro
        """
        return pulumi.get(self, "hourly_price")

    @property
    @pulumi.getter
    def monthly_price(self) -> Optional[float]:
        """
        Estimated monthly price, for a 30 days month, in Euro
        """
        return pulumi.get(self, "monthly_price")

    @property
    @pulumi.getter
    def ncpus(self) -> Optional[float]:
        """
        Number of CPU
        """
        return pulumi.get(self, "ncpus")

    @property
    @pulumi.getter
    def network(self) -> Optional['outputs.ScalewayInstanceV1ServerTypeNetworkProperties']:
        """
        Network available for the instance
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def per_volume_constraint(self) -> Optional['outputs.ScalewayInstanceV1ServerTypePerVolumeConstraintProperties']:
        """
        Additional volume constraints
        """
        return pulumi.get(self, "per_volume_constraint")

    @property
    @pulumi.getter
    def ram(self) -> Optional[float]:
        """
        Available RAM in bytes
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter
    def volumes_constraint(self) -> Optional['outputs.ScalewayInstanceV1ServerTypeVolumesConstraintProperties']:
        """
        Initial volume constraints
        """
        return pulumi.get(self, "volumes_constraint")


@pulumi.output_type
class ScalewayInstanceV1ServerTypeCapabilitiesProperties(dict):
    """
    Capabilities
    """
    def __init__(__self__, *,
                 block_storage: Optional[bool] = None,
                 boot_types: Optional[Sequence['ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem']] = None):
        """
        Capabilities
        :param bool block_storage: True if server supports block storage
        :param Sequence['ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem'] boot_types: List of supported boot types
        """
        if block_storage is not None:
            pulumi.set(__self__, "block_storage", block_storage)
        if boot_types is not None:
            pulumi.set(__self__, "boot_types", boot_types)

    @property
    @pulumi.getter
    def block_storage(self) -> Optional[bool]:
        """
        True if server supports block storage
        """
        return pulumi.get(self, "block_storage")

    @property
    @pulumi.getter
    def boot_types(self) -> Optional[Sequence['ScalewayInstanceV1ServerTypeCapabilitiesPropertiesBootTypesItem']]:
        """
        List of supported boot types
        """
        return pulumi.get(self, "boot_types")


@pulumi.output_type
class ScalewayInstanceV1ServerTypeNetworkInterface(dict):
    def __init__(__self__, *,
                 internal_bandwidth: Optional[float] = None,
                 internet_bandwidth: Optional[float] = None):
        """
        :param float internal_bandwidth: Maximum internal bandwidth in bits per seconds
        :param float internet_bandwidth: Maximum internet bandwidth in bits per seconds
        """
        if internal_bandwidth is not None:
            pulumi.set(__self__, "internal_bandwidth", internal_bandwidth)
        if internet_bandwidth is not None:
            pulumi.set(__self__, "internet_bandwidth", internet_bandwidth)

    @property
    @pulumi.getter
    def internal_bandwidth(self) -> Optional[float]:
        """
        Maximum internal bandwidth in bits per seconds
        """
        return pulumi.get(self, "internal_bandwidth")

    @property
    @pulumi.getter
    def internet_bandwidth(self) -> Optional[float]:
        """
        Maximum internet bandwidth in bits per seconds
        """
        return pulumi.get(self, "internet_bandwidth")


@pulumi.output_type
class ScalewayInstanceV1ServerTypeNetworkProperties(dict):
    """
    Network available for the instance
    """
    def __init__(__self__, *,
                 interfaces: Optional[Sequence['outputs.ScalewayInstanceV1ServerTypeNetworkInterface']] = None,
                 ipv6_support: Optional[bool] = None,
                 sum_internal_bandwidth: Optional[float] = None,
                 sum_internet_bandwidth: Optional[float] = None):
        """
        Network available for the instance
        :param Sequence['ScalewayInstanceV1ServerTypeNetworkInterface'] interfaces: List of available network interfaces
        :param bool ipv6_support: True if IPv6 is enabled
        :param float sum_internal_bandwidth: Total maximum internal bandwidth in bits per seconds
        :param float sum_internet_bandwidth: Total maximum internet bandwidth in bits per seconds
        """
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if ipv6_support is not None:
            pulumi.set(__self__, "ipv6_support", ipv6_support)
        if sum_internal_bandwidth is not None:
            pulumi.set(__self__, "sum_internal_bandwidth", sum_internal_bandwidth)
        if sum_internet_bandwidth is not None:
            pulumi.set(__self__, "sum_internet_bandwidth", sum_internet_bandwidth)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.ScalewayInstanceV1ServerTypeNetworkInterface']]:
        """
        List of available network interfaces
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def ipv6_support(self) -> Optional[bool]:
        """
        True if IPv6 is enabled
        """
        return pulumi.get(self, "ipv6_support")

    @property
    @pulumi.getter
    def sum_internal_bandwidth(self) -> Optional[float]:
        """
        Total maximum internal bandwidth in bits per seconds
        """
        return pulumi.get(self, "sum_internal_bandwidth")

    @property
    @pulumi.getter
    def sum_internet_bandwidth(self) -> Optional[float]:
        """
        Total maximum internet bandwidth in bits per seconds
        """
        return pulumi.get(self, "sum_internet_bandwidth")


@pulumi.output_type
class ScalewayInstanceV1ServerTypePerVolumeConstraintProperties(dict):
    """
    Additional volume constraints
    """
    def __init__(__self__, *,
                 l_ssd: Optional['outputs.ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties'] = None):
        """
        Additional volume constraints
        :param 'ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties' l_ssd: Local SSD volumes
        """
        if l_ssd is not None:
            pulumi.set(__self__, "l_ssd", l_ssd)

    @property
    @pulumi.getter
    def l_ssd(self) -> Optional['outputs.ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties']:
        """
        Local SSD volumes
        """
        return pulumi.get(self, "l_ssd")


@pulumi.output_type
class ScalewayInstanceV1ServerTypePerVolumeConstraintPropertiesLSsdProperties(dict):
    """
    Local SSD volumes
    """
    def __init__(__self__, *,
                 max_size: Optional[float] = None,
                 min_size: Optional[float] = None):
        """
        Local SSD volumes
        :param float max_size: Maximum volume size in bytes (in bytes)
        :param float min_size: Minimum volume size in bytes (in bytes)
        """
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)

    @property
    @pulumi.getter
    def max_size(self) -> Optional[float]:
        """
        Maximum volume size in bytes (in bytes)
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter
    def min_size(self) -> Optional[float]:
        """
        Minimum volume size in bytes (in bytes)
        """
        return pulumi.get(self, "min_size")


@pulumi.output_type
class ScalewayInstanceV1ServerTypeVolumesConstraintProperties(dict):
    """
    Initial volume constraints
    """
    def __init__(__self__, *,
                 max_size: Optional[float] = None,
                 min_size: Optional[float] = None):
        """
        Initial volume constraints
        :param float max_size: Maximum volume size in bytes (in bytes)
        :param float min_size: Minimum volume size in bytes (in bytes)
        """
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)

    @property
    @pulumi.getter
    def max_size(self) -> Optional[float]:
        """
        Maximum volume size in bytes (in bytes)
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter
    def min_size(self) -> Optional[float]:
        """
        Minimum volume size in bytes (in bytes)
        """
        return pulumi.get(self, "min_size")


@pulumi.output_type
class ScalewayInstanceV1Volume(dict):
    def __init__(__self__, *,
                 creation_date: Optional[str] = None,
                 export_uri: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 project: Optional[str] = None,
                 server: Optional['outputs.ScalewayInstanceV1VolumeServerProperties'] = None,
                 size: Optional[float] = None,
                 state: Optional['ScalewayInstanceV1VolumeState'] = None,
                 tags: Optional[Sequence[str]] = None,
                 volume_type: Optional['ScalewayInstanceV1VolumeVolumeType'] = None,
                 zone: Optional[str] = None):
        """
        :param str creation_date: The volume creation date (RFC 3339 format)
        :param str export_uri: Show the volume NBD export URI
        :param str modification_date: The volume modification date (RFC 3339 format)
        :param str name: The volume name
        :param str organization: The volume organization ID
        :param str project: The volume project ID
        :param 'ScalewayInstanceV1VolumeServerProperties' server: The server attached to the volume
        :param float size: The volume disk size (in bytes)
        :param Sequence[str] tags: The volume tags
        :param str zone: The zone in which is the volume
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if export_uri is not None:
            pulumi.set(__self__, "export_uri", export_uri)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[str]:
        """
        The volume creation date (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def export_uri(self) -> Optional[str]:
        """
        Show the volume NBD export URI
        """
        return pulumi.get(self, "export_uri")

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[str]:
        """
        The volume modification date (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The volume name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        The volume organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The volume project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.ScalewayInstanceV1VolumeServerProperties']:
        """
        The server attached to the volume
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        """
        The volume disk size (in bytes)
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1VolumeState']:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The volume tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def volume_type(self) -> Optional['ScalewayInstanceV1VolumeVolumeType']:
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The zone in which is the volume
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1VolumeServer(dict):
    def __init__(__self__, *,
                 boot: Optional[bool] = None,
                 creation_date: Optional[str] = None,
                 export_uri: Optional[str] = None,
                 id: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 project: Optional[str] = None,
                 server: Optional['outputs.ScalewayInstanceV1ServerSummary'] = None,
                 size: Optional[float] = None,
                 state: Optional['ScalewayInstanceV1VolumeServerState'] = None,
                 volume_type: Optional['ScalewayInstanceV1VolumeServerVolumeType'] = None,
                 zone: Optional[str] = None):
        """
        :param str creation_date: (RFC 3339 format)
        :param str modification_date: (RFC 3339 format)
        :param float size: (in bytes)
        """
        if boot is not None:
            pulumi.set(__self__, "boot", boot)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if export_uri is not None:
            pulumi.set(__self__, "export_uri", export_uri)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def boot(self) -> Optional[bool]:
        return pulumi.get(self, "boot")

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[str]:
        """
        (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def export_uri(self) -> Optional[str]:
        return pulumi.get(self, "export_uri")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[str]:
        """
        (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.ScalewayInstanceV1ServerSummary']:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        """
        (in bytes)
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1VolumeServerState']:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def volume_type(self) -> Optional['ScalewayInstanceV1VolumeServerVolumeType']:
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1VolumeServerProperties(dict):
    """
    The server attached to the volume
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The server attached to the volume
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ScalewayInstanceV1VolumeServerTemplate(dict):
    def __init__(__self__, *,
                 base_snapshot: Optional[str] = None,
                 boot: Optional[bool] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 organization: Optional[str] = None,
                 project: Optional[str] = None,
                 size: Optional[float] = None,
                 volume_type: Optional['ScalewayInstanceV1VolumeServerTemplateVolumeType'] = None):
        """
        :param str base_snapshot: The ID of the snapshot on which this volume will be based
        :param bool boot: Force the server to boot on this volume
        :param str id: UUID of the volume
        :param str name: Name of the volume
        :param str organization: Organization ID of the volume
        :param str project: Project ID of the volume
        :param float size: Disk size of the volume, must be a multiple of 512 (in bytes)
        """
        if base_snapshot is not None:
            pulumi.set(__self__, "base_snapshot", base_snapshot)
        if boot is None:
            boot = False
        if boot is not None:
            pulumi.set(__self__, "boot", boot)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def base_snapshot(self) -> Optional[str]:
        """
        The ID of the snapshot on which this volume will be based
        """
        return pulumi.get(self, "base_snapshot")

    @property
    @pulumi.getter
    def boot(self) -> Optional[bool]:
        """
        Force the server to boot on this volume
        """
        return pulumi.get(self, "boot")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        UUID of the volume
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the volume
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        Organization ID of the volume
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        Project ID of the volume
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        """
        Disk size of the volume, must be a multiple of 512 (in bytes)
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volume_type(self) -> Optional['ScalewayInstanceV1VolumeServerTemplateVolumeType']:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ScalewayInstanceV1VolumeSummary(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[float] = None,
                 volume_type: Optional['ScalewayInstanceV1VolumeSummaryVolumeType'] = None):
        """
        :param float size: (in bytes)
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        """
        (in bytes)
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def volume_type(self) -> Optional['ScalewayInstanceV1VolumeSummaryVolumeType']:
        return pulumi.get(self, "volume_type")


