# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = ['SecurityGroupArgs', 'SecurityGroup']

@pulumi.input_type
class SecurityGroupArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_default_security: Optional[pulumi.Input[bool]] = None,
                 inbound_default_policy: Optional[pulumi.Input['InboundDefaultPolicy']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organization_default: Optional[pulumi.Input[bool]] = None,
                 outbound_default_policy: Optional[pulumi.Input['OutboundDefaultPolicy']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 project_default: Optional[pulumi.Input[bool]] = None,
                 stateful: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityGroup resource.
        :param pulumi.Input[str] description: The security groups description
        :param pulumi.Input[bool] enable_default_security: True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
        :param pulumi.Input['InboundDefaultPolicy'] inbound_default_policy: The default inbound policy
        :param pulumi.Input[str] name: The security groups name
        :param pulumi.Input[str] organization: The security groups organization ID
        :param pulumi.Input[bool] organization_default: True if it is your default security group for this organization ID
        :param pulumi.Input['OutboundDefaultPolicy'] outbound_default_policy: The default outbound policy
        :param pulumi.Input[str] project: The security group project ID
        :param pulumi.Input[bool] project_default: True if it is your default security group for this project ID
        :param pulumi.Input[bool] stateful: True if the security group is stateful
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The security group tags
        :param pulumi.Input[str] zone: The zone you want to target
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_default_security is not None:
            pulumi.set(__self__, "enable_default_security", enable_default_security)
        if inbound_default_policy is None:
            inbound_default_policy = 'accept'
        if inbound_default_policy is not None:
            pulumi.set(__self__, "inbound_default_policy", inbound_default_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if organization_default is not None:
            pulumi.set(__self__, "organization_default", organization_default)
        if outbound_default_policy is None:
            outbound_default_policy = 'accept'
        if outbound_default_policy is not None:
            pulumi.set(__self__, "outbound_default_policy", outbound_default_policy)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if project_default is not None:
            pulumi.set(__self__, "project_default", project_default)
        if stateful is not None:
            pulumi.set(__self__, "stateful", stateful)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The security groups description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enable_default_security(self) -> Optional[pulumi.Input[bool]]:
        """
        True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
        """
        return pulumi.get(self, "enable_default_security")

    @enable_default_security.setter
    def enable_default_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_default_security", value)

    @property
    @pulumi.getter
    def inbound_default_policy(self) -> Optional[pulumi.Input['InboundDefaultPolicy']]:
        """
        The default inbound policy
        """
        return pulumi.get(self, "inbound_default_policy")

    @inbound_default_policy.setter
    def inbound_default_policy(self, value: Optional[pulumi.Input['InboundDefaultPolicy']]):
        pulumi.set(self, "inbound_default_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The security groups name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The security groups organization ID
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def organization_default(self) -> Optional[pulumi.Input[bool]]:
        """
        True if it is your default security group for this organization ID
        """
        return pulumi.get(self, "organization_default")

    @organization_default.setter
    def organization_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "organization_default", value)

    @property
    @pulumi.getter
    def outbound_default_policy(self) -> Optional[pulumi.Input['OutboundDefaultPolicy']]:
        """
        The default outbound policy
        """
        return pulumi.get(self, "outbound_default_policy")

    @outbound_default_policy.setter
    def outbound_default_policy(self, value: Optional[pulumi.Input['OutboundDefaultPolicy']]):
        pulumi.set(self, "outbound_default_policy", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The security group project ID
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def project_default(self) -> Optional[pulumi.Input[bool]]:
        """
        True if it is your default security group for this project ID
        """
        return pulumi.get(self, "project_default")

    @project_default.setter
    def project_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "project_default", value)

    @property
    @pulumi.getter
    def stateful(self) -> Optional[pulumi.Input[bool]]:
        """
        True if the security group is stateful
        """
        return pulumi.get(self, "stateful")

    @stateful.setter
    def stateful(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stateful", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone you want to target
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class SecurityGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_default_security: Optional[pulumi.Input[bool]] = None,
                 inbound_default_policy: Optional[pulumi.Input['InboundDefaultPolicy']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organization_default: Optional[pulumi.Input[bool]] = None,
                 outbound_default_policy: Optional[pulumi.Input['OutboundDefaultPolicy']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 project_default: Optional[pulumi.Input[bool]] = None,
                 stateful: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SecurityGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The security groups description
        :param pulumi.Input[bool] enable_default_security: True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
        :param pulumi.Input['InboundDefaultPolicy'] inbound_default_policy: The default inbound policy
        :param pulumi.Input[str] name: The security groups name
        :param pulumi.Input[str] organization: The security groups organization ID
        :param pulumi.Input[bool] organization_default: True if it is your default security group for this organization ID
        :param pulumi.Input['OutboundDefaultPolicy'] outbound_default_policy: The default outbound policy
        :param pulumi.Input[str] project: The security group project ID
        :param pulumi.Input[bool] project_default: True if it is your default security group for this project ID
        :param pulumi.Input[bool] stateful: True if the security group is stateful
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The security group tags
        :param pulumi.Input[str] zone: The zone you want to target
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecurityGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_default_security: Optional[pulumi.Input[bool]] = None,
                 inbound_default_policy: Optional[pulumi.Input['InboundDefaultPolicy']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 organization_default: Optional[pulumi.Input[bool]] = None,
                 outbound_default_policy: Optional[pulumi.Input['OutboundDefaultPolicy']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 project_default: Optional[pulumi.Input[bool]] = None,
                 stateful: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupArgs.__new__(SecurityGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enable_default_security"] = enable_default_security
            if inbound_default_policy is None:
                inbound_default_policy = 'accept'
            __props__.__dict__["inbound_default_policy"] = inbound_default_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["organization"] = organization
            __props__.__dict__["organization_default"] = organization_default
            if outbound_default_policy is None:
                outbound_default_policy = 'accept'
            __props__.__dict__["outbound_default_policy"] = outbound_default_policy
            __props__.__dict__["project"] = project
            __props__.__dict__["project_default"] = project_default
            __props__.__dict__["stateful"] = stateful
            __props__.__dict__["tags"] = tags
            __props__.__dict__["zone"] = zone
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["modification_date"] = None
            __props__.__dict__["servers"] = None
            __props__.__dict__["state"] = None
        super(SecurityGroup, __self__).__init__(
            'scaleway-instances:security_groups:SecurityGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SecurityGroup':
        """
        Get an existing SecurityGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecurityGroupArgs.__new__(SecurityGroupArgs)

        __props__.__dict__["creation_date"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["enable_default_security"] = None
        __props__.__dict__["inbound_default_policy"] = None
        __props__.__dict__["modification_date"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["organization"] = None
        __props__.__dict__["organization_default"] = None
        __props__.__dict__["outbound_default_policy"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["project_default"] = None
        __props__.__dict__["servers"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["stateful"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["zone"] = None
        return SecurityGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def creation_date(self) -> pulumi.Output[Optional[str]]:
        """
        The security group creation date (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The security groups description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable_default_security(self) -> pulumi.Output[Optional[bool]]:
        """
        True if SMTP is blocked on IPv4 and IPv6. This feature is read only, please open a ticket if you need to make it configurable.
        """
        return pulumi.get(self, "enable_default_security")

    @property
    @pulumi.getter
    def inbound_default_policy(self) -> pulumi.Output[Optional['InboundDefaultPolicy']]:
        """
        The default inbound policy
        """
        return pulumi.get(self, "inbound_default_policy")

    @property
    @pulumi.getter
    def modification_date(self) -> pulumi.Output[Optional[str]]:
        """
        The security group modification date (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The security groups name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional[str]]:
        """
        The security groups organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def organization_default(self) -> pulumi.Output[Optional[bool]]:
        """
        True if it is your default security group for this organization ID
        """
        return pulumi.get(self, "organization_default")

    @property
    @pulumi.getter
    def outbound_default_policy(self) -> pulumi.Output[Optional['OutboundDefaultPolicy']]:
        """
        The default outbound policy
        """
        return pulumi.get(self, "outbound_default_policy")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The security group project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def project_default(self) -> pulumi.Output[Optional[bool]]:
        """
        True if it is your default security group for this project ID
        """
        return pulumi.get(self, "project_default")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Optional[Sequence['outputs.ScalewayInstanceV1ServerSummary']]]:
        """
        List of servers attached to this security group
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional['State']]:
        """
        Security group state
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def stateful(self) -> pulumi.Output[Optional[bool]]:
        """
        True if the security group is stateful
        """
        return pulumi.get(self, "stateful")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The security group tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[Optional[str]]:
        """
        The zone in which is the security group
        """
        return pulumi.get(self, "zone")

