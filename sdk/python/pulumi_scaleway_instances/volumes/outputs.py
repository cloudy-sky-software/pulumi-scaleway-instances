# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ScalewayInstanceV1GetVolumeResponse',
    'ScalewayInstanceV1ListVolumesResponse',
    'ScalewayInstanceV1ListVolumesTypesResponse',
    'ScalewayInstanceV1Volume',
    'ScalewayInstanceV1VolumeServerProperties',
    'ScalewayInstanceV1VolumeType',
    'ScalewayInstanceV1VolumeTypeCapabilities',
    'ScalewayInstanceV1VolumeTypeConstraints',
    'ServerProperties',
]

@pulumi.output_type
class ScalewayInstanceV1GetVolumeResponse(dict):
    def __init__(__self__, *,
                 volume: Optional['outputs.ScalewayInstanceV1Volume'] = None):
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ScalewayInstanceV1Volume']:
        return pulumi.get(self, "volume")


@pulumi.output_type
class ScalewayInstanceV1ListVolumesResponse(dict):
    def __init__(__self__, *,
                 volumes: Optional[Sequence['outputs.ScalewayInstanceV1Volume']] = None):
        """
        :param Sequence['ScalewayInstanceV1Volume'] volumes: List of volumes
        """
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ScalewayInstanceV1Volume']]:
        """
        List of volumes
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ScalewayInstanceV1ListVolumesTypesResponse(dict):
    def __init__(__self__, *,
                 volumes: Optional[Mapping[str, 'outputs.ScalewayInstanceV1VolumeType']] = None):
        """
        :param Mapping[str, 'ScalewayInstanceV1VolumeType'] volumes: Map of volume types
        """
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Mapping[str, 'outputs.ScalewayInstanceV1VolumeType']]:
        """
        Map of volume types
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ScalewayInstanceV1Volume(dict):
    def __init__(__self__, *,
                 name: str,
                 project: str,
                 creation_date: Optional[str] = None,
                 export_uri: Optional[str] = None,
                 id: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 organization: Optional[str] = None,
                 server: Optional['outputs.ScalewayInstanceV1VolumeServerProperties'] = None,
                 size: Optional[float] = None,
                 state: Optional['ScalewayInstanceV1VolumeState'] = None,
                 tags: Optional[Sequence[str]] = None,
                 volume_type: Optional['ScalewayInstanceV1VolumeVolumeType'] = None,
                 zone: Optional[str] = None):
        """
        :param str name: The volume name
        :param str project: The volume project ID
        :param str creation_date: The volume creation date (RFC 3339 format)
        :param str export_uri: Show the volume NBD export URI
        :param str modification_date: The volume modification date (RFC 3339 format)
        :param str organization: The volume organization ID
        :param 'ScalewayInstanceV1VolumeServerProperties' server: The server attached to the volume
        :param float size: The volume disk size (in bytes)
        :param Sequence[str] tags: The volume tags
        :param str zone: The zone in which is the volume
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if export_uri is not None:
            pulumi.set(__self__, "export_uri", export_uri)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The volume name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The volume project ID
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[str]:
        """
        The volume creation date (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def export_uri(self) -> Optional[str]:
        """
        Show the volume NBD export URI
        """
        return pulumi.get(self, "export_uri")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[str]:
        """
        The volume modification date (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def organization(self) -> Optional[str]:
        """
        The volume organization ID
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def server(self) -> Optional['outputs.ScalewayInstanceV1VolumeServerProperties']:
        """
        The server attached to the volume
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def size(self) -> Optional[float]:
        """
        The volume disk size (in bytes)
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1VolumeState']:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        The volume tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def volume_type(self) -> Optional['ScalewayInstanceV1VolumeVolumeType']:
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        The zone in which is the volume
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ScalewayInstanceV1VolumeServerProperties(dict):
    """
    The server attached to the volume
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The server attached to the volume
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ScalewayInstanceV1VolumeType(dict):
    def __init__(__self__, *,
                 capabilities: Optional['outputs.ScalewayInstanceV1VolumeTypeCapabilities'] = None,
                 constraints: Optional['outputs.ScalewayInstanceV1VolumeTypeConstraints'] = None,
                 display_name: Optional[str] = None):
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.ScalewayInstanceV1VolumeTypeCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def constraints(self) -> Optional['outputs.ScalewayInstanceV1VolumeTypeConstraints']:
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ScalewayInstanceV1VolumeTypeCapabilities(dict):
    def __init__(__self__, *,
                 snapshot: Optional[bool] = None):
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional[bool]:
        return pulumi.get(self, "snapshot")


@pulumi.output_type
class ScalewayInstanceV1VolumeTypeConstraints(dict):
    def __init__(__self__, *,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        """
        :param float max: (in bytes)
        :param float min: (in bytes)
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        """
        (in bytes)
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        """
        (in bytes)
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class ServerProperties(dict):
    """
    The server attached to the volume
    """
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        The server attached to the volume
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


