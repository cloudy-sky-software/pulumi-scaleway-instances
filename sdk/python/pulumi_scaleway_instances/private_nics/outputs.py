# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ScalewayInstanceV1GetPrivateNICResponse',
    'ScalewayInstanceV1ListPrivateNICsResponse',
    'ScalewayInstanceV1PrivateNIC',
]

@pulumi.output_type
class ScalewayInstanceV1GetPrivateNICResponse(dict):
    def __init__(__self__, *,
                 private_nic: Optional['outputs.ScalewayInstanceV1PrivateNIC'] = None):
        ScalewayInstanceV1GetPrivateNICResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_nic=private_nic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_nic: Optional['outputs.ScalewayInstanceV1PrivateNIC'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if private_nic is not None:
            _setter("private_nic", private_nic)

    @property
    @pulumi.getter
    def private_nic(self) -> Optional['outputs.ScalewayInstanceV1PrivateNIC']:
        return pulumi.get(self, "private_nic")


@pulumi.output_type
class ScalewayInstanceV1ListPrivateNICsResponse(dict):
    def __init__(__self__, *,
                 private_nics: Optional[Sequence['outputs.ScalewayInstanceV1PrivateNIC']] = None):
        ScalewayInstanceV1ListPrivateNICsResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            private_nics=private_nics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             private_nics: Optional[Sequence['outputs.ScalewayInstanceV1PrivateNIC']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if private_nics is not None:
            _setter("private_nics", private_nics)

    @property
    @pulumi.getter
    def private_nics(self) -> Optional[Sequence['outputs.ScalewayInstanceV1PrivateNIC']]:
        return pulumi.get(self, "private_nics")


@pulumi.output_type
class ScalewayInstanceV1PrivateNIC(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 private_network_id: Optional[str] = None,
                 server_id: Optional[str] = None,
                 state: Optional['ScalewayInstanceV1PrivateNICState'] = None):
        """
        :param str id: The private NIC unique ID
        :param str mac_address: The private NIC MAC address
        :param str private_network_id: The private network where the private NIC is attached
        :param str server_id: The server the private NIC is attached to
        :param 'ScalewayInstanceV1PrivateNICState' state: The private NIC state
        """
        ScalewayInstanceV1PrivateNIC._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            mac_address=mac_address,
            private_network_id=private_network_id,
            server_id=server_id,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             mac_address: Optional[str] = None,
             private_network_id: Optional[str] = None,
             server_id: Optional[str] = None,
             state: Optional['ScalewayInstanceV1PrivateNICState'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if private_network_id is not None:
            _setter("private_network_id", private_network_id)
        if server_id is not None:
            _setter("server_id", server_id)
        if state is None:
            state = 'available'
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The private NIC unique ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac_address(self) -> Optional[str]:
        """
        The private NIC MAC address
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def private_network_id(self) -> Optional[str]:
        """
        The private network where the private NIC is attached
        """
        return pulumi.get(self, "private_network_id")

    @property
    @pulumi.getter
    def server_id(self) -> Optional[str]:
        """
        The server the private NIC is attached to
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter
    def state(self) -> Optional['ScalewayInstanceV1PrivateNICState']:
        """
        The private NIC state
        """
        return pulumi.get(self, "state")


