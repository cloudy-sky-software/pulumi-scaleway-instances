# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ScalewayInstanceV1BootscriptArgs',
    'ScalewayInstanceV1VolumeServerPropertiesArgs',
    'ScalewayInstanceV1VolumeSummaryArgs',
    'ScalewayInstanceV1VolumeArgs',
]

@pulumi.input_type
class ScalewayInstanceV1BootscriptArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input['ScalewayInstanceV1BootscriptArch']] = None,
                 bootcmdargs: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 dtb: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 initrd: Optional[pulumi.Input[str]] = None,
                 kernel: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ScalewayInstanceV1BootscriptArch'] arch: The bootscript arch
        :param pulumi.Input[str] bootcmdargs: The bootscript arguments
        :param pulumi.Input[bool] default: Dispmay if the bootscript is the default bootscript if no other boot option is configured
        :param pulumi.Input[str] dtb: Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
        :param pulumi.Input[str] id: The bootscript ID
        :param pulumi.Input[str] initrd: The initrd (initial ramdisk) configuration
        :param pulumi.Input[str] kernel: The server kernel version
        :param pulumi.Input[str] organization: The bootscript organization ID
        :param pulumi.Input[str] project: The bootscript project ID
        :param pulumi.Input[bool] public: Provide information if the bootscript is public
        :param pulumi.Input[str] title: The bootscript title
        :param pulumi.Input[str] zone: The zone in which is the bootscript
        """
        if arch is None:
            arch = 'x86_64'
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if bootcmdargs is not None:
            pulumi.set(__self__, "bootcmdargs", bootcmdargs)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dtb is not None:
            pulumi.set(__self__, "dtb", dtb)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initrd is not None:
            pulumi.set(__self__, "initrd", initrd)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input['ScalewayInstanceV1BootscriptArch']]:
        """
        The bootscript arch
        """
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input['ScalewayInstanceV1BootscriptArch']]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def bootcmdargs(self) -> Optional[pulumi.Input[str]]:
        """
        The bootscript arguments
        """
        return pulumi.get(self, "bootcmdargs")

    @bootcmdargs.setter
    def bootcmdargs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootcmdargs", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Dispmay if the bootscript is the default bootscript if no other boot option is configured
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def dtb(self) -> Optional[pulumi.Input[str]]:
        """
        Provide information regarding a Device Tree Binary (dtb) for use with C1 servers
        """
        return pulumi.get(self, "dtb")

    @dtb.setter
    def dtb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtb", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The bootscript ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def initrd(self) -> Optional[pulumi.Input[str]]:
        """
        The initrd (initial ramdisk) configuration
        """
        return pulumi.get(self, "initrd")

    @initrd.setter
    def initrd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initrd", value)

    @property
    @pulumi.getter
    def kernel(self) -> Optional[pulumi.Input[str]]:
        """
        The server kernel version
        """
        return pulumi.get(self, "kernel")

    @kernel.setter
    def kernel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kernel", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The bootscript organization ID
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The bootscript project ID
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Provide information if the bootscript is public
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The bootscript title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone in which is the bootscript
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ScalewayInstanceV1VolumeServerPropertiesArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The server attached to the volume
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ScalewayInstanceV1VolumeSummaryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 volume_type: Optional[pulumi.Input['ScalewayInstanceV1VolumeSummaryVolumeType']] = None):
        """
        :param pulumi.Input[float] size: (in bytes)
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        (in bytes)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def volume_type(self) -> Optional[pulumi.Input['ScalewayInstanceV1VolumeSummaryVolumeType']]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input['ScalewayInstanceV1VolumeSummaryVolumeType']]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class ScalewayInstanceV1VolumeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 creation_date: Optional[pulumi.Input[str]] = None,
                 export_uri: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 modification_date: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input['ScalewayInstanceV1VolumeServerPropertiesArgs']] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input['ScalewayInstanceV1VolumeState']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 volume_type: Optional[pulumi.Input['ScalewayInstanceV1VolumeVolumeType']] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The volume name
        :param pulumi.Input[str] project: The volume project ID
        :param pulumi.Input[str] creation_date: The volume creation date (RFC 3339 format)
        :param pulumi.Input[str] export_uri: Show the volume NBD export URI
        :param pulumi.Input[str] modification_date: The volume modification date (RFC 3339 format)
        :param pulumi.Input[str] organization: The volume organization ID
        :param pulumi.Input['ScalewayInstanceV1VolumeServerPropertiesArgs'] server: The server attached to the volume
        :param pulumi.Input[float] size: The volume disk size (in bytes)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The volume tags
        :param pulumi.Input[str] zone: The zone in which is the volume
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if export_uri is not None:
            pulumi.set(__self__, "export_uri", export_uri)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is None:
            state = 'available'
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_type is None:
            volume_type = 'l_ssd'
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The volume name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The volume project ID
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The volume creation date (RFC 3339 format)
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def export_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Show the volume NBD export URI
        """
        return pulumi.get(self, "export_uri")

    @export_uri.setter
    def export_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_uri", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def modification_date(self) -> Optional[pulumi.Input[str]]:
        """
        The volume modification date (RFC 3339 format)
        """
        return pulumi.get(self, "modification_date")

    @modification_date.setter
    def modification_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modification_date", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The volume organization ID
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input['ScalewayInstanceV1VolumeServerPropertiesArgs']]:
        """
        The server attached to the volume
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input['ScalewayInstanceV1VolumeServerPropertiesArgs']]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        The volume disk size (in bytes)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['ScalewayInstanceV1VolumeState']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['ScalewayInstanceV1VolumeState']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The volume tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def volume_type(self) -> Optional[pulumi.Input['ScalewayInstanceV1VolumeVolumeType']]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input['ScalewayInstanceV1VolumeVolumeType']]):
        pulumi.set(self, "volume_type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The zone in which is the volume
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


