# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ScalewayInstanceV1GetServerTypesAvailabilityResponse',
    'ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability',
]

@pulumi.output_type
class ScalewayInstanceV1GetServerTypesAvailabilityResponse(dict):
    def __init__(__self__, *,
                 servers: Optional[Mapping[str, 'outputs.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability']] = None):
        ScalewayInstanceV1GetServerTypesAvailabilityResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            servers=servers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             servers: Optional[Mapping[str, 'outputs.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if servers is not None:
            _setter("servers", servers)

    @property
    @pulumi.getter
    def servers(self) -> Optional[Mapping[str, 'outputs.ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability']]:
        return pulumi.get(self, "servers")


@pulumi.output_type
class ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability(dict):
    def __init__(__self__, *,
                 availability: Optional['ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityAvailability'] = None):
        ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailability._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability=availability,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability: Optional['ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityAvailability'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability is None:
            availability = 'available'
        if availability is not None:
            _setter("availability", availability)

    @property
    @pulumi.getter
    def availability(self) -> Optional['ScalewayInstanceV1GetServerTypesAvailabilityResponseAvailabilityAvailability']:
        return pulumi.get(self, "availability")


