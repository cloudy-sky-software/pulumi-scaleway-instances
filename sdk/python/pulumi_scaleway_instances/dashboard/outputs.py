# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ScalewayInstanceV1Dashboard',
]

@pulumi.output_type
class ScalewayInstanceV1Dashboard(dict):
    def __init__(__self__, *,
                 images_count: Optional[float] = None,
                 ips_count: Optional[float] = None,
                 ips_unused: Optional[float] = None,
                 placement_groups_count: Optional[float] = None,
                 private_nics_count: Optional[float] = None,
                 running_servers_count: Optional[float] = None,
                 security_groups_count: Optional[float] = None,
                 servers_by_types: Optional[Mapping[str, float]] = None,
                 servers_count: Optional[float] = None,
                 snapshots_count: Optional[float] = None,
                 volumes_bssd_count: Optional[float] = None,
                 volumes_bssd_total_size: Optional[float] = None,
                 volumes_count: Optional[float] = None,
                 volumes_lssd_count: Optional[float] = None,
                 volumes_lssd_total_size: Optional[float] = None):
        if images_count is not None:
            pulumi.set(__self__, "images_count", images_count)
        if ips_count is not None:
            pulumi.set(__self__, "ips_count", ips_count)
        if ips_unused is not None:
            pulumi.set(__self__, "ips_unused", ips_unused)
        if placement_groups_count is not None:
            pulumi.set(__self__, "placement_groups_count", placement_groups_count)
        if private_nics_count is not None:
            pulumi.set(__self__, "private_nics_count", private_nics_count)
        if running_servers_count is not None:
            pulumi.set(__self__, "running_servers_count", running_servers_count)
        if security_groups_count is not None:
            pulumi.set(__self__, "security_groups_count", security_groups_count)
        if servers_by_types is not None:
            pulumi.set(__self__, "servers_by_types", servers_by_types)
        if servers_count is not None:
            pulumi.set(__self__, "servers_count", servers_count)
        if snapshots_count is not None:
            pulumi.set(__self__, "snapshots_count", snapshots_count)
        if volumes_bssd_count is not None:
            pulumi.set(__self__, "volumes_bssd_count", volumes_bssd_count)
        if volumes_bssd_total_size is not None:
            pulumi.set(__self__, "volumes_bssd_total_size", volumes_bssd_total_size)
        if volumes_count is not None:
            pulumi.set(__self__, "volumes_count", volumes_count)
        if volumes_lssd_count is not None:
            pulumi.set(__self__, "volumes_lssd_count", volumes_lssd_count)
        if volumes_lssd_total_size is not None:
            pulumi.set(__self__, "volumes_lssd_total_size", volumes_lssd_total_size)

    @property
    @pulumi.getter(name="imagesCount")
    def images_count(self) -> Optional[float]:
        return pulumi.get(self, "images_count")

    @property
    @pulumi.getter(name="ipsCount")
    def ips_count(self) -> Optional[float]:
        return pulumi.get(self, "ips_count")

    @property
    @pulumi.getter(name="ipsUnused")
    def ips_unused(self) -> Optional[float]:
        return pulumi.get(self, "ips_unused")

    @property
    @pulumi.getter(name="placementGroupsCount")
    def placement_groups_count(self) -> Optional[float]:
        return pulumi.get(self, "placement_groups_count")

    @property
    @pulumi.getter(name="privateNicsCount")
    def private_nics_count(self) -> Optional[float]:
        return pulumi.get(self, "private_nics_count")

    @property
    @pulumi.getter(name="runningServersCount")
    def running_servers_count(self) -> Optional[float]:
        return pulumi.get(self, "running_servers_count")

    @property
    @pulumi.getter(name="securityGroupsCount")
    def security_groups_count(self) -> Optional[float]:
        return pulumi.get(self, "security_groups_count")

    @property
    @pulumi.getter(name="serversByTypes")
    def servers_by_types(self) -> Optional[Mapping[str, float]]:
        return pulumi.get(self, "servers_by_types")

    @property
    @pulumi.getter(name="serversCount")
    def servers_count(self) -> Optional[float]:
        return pulumi.get(self, "servers_count")

    @property
    @pulumi.getter(name="snapshotsCount")
    def snapshots_count(self) -> Optional[float]:
        return pulumi.get(self, "snapshots_count")

    @property
    @pulumi.getter(name="volumesBSsdCount")
    def volumes_bssd_count(self) -> Optional[float]:
        return pulumi.get(self, "volumes_bssd_count")

    @property
    @pulumi.getter(name="volumesBSsdTotalSize")
    def volumes_bssd_total_size(self) -> Optional[float]:
        return pulumi.get(self, "volumes_bssd_total_size")

    @property
    @pulumi.getter(name="volumesCount")
    def volumes_count(self) -> Optional[float]:
        return pulumi.get(self, "volumes_count")

    @property
    @pulumi.getter(name="volumesLSsdCount")
    def volumes_lssd_count(self) -> Optional[float]:
        return pulumi.get(self, "volumes_lssd_count")

    @property
    @pulumi.getter(name="volumesLSsdTotalSize")
    def volumes_lssd_total_size(self) -> Optional[float]:
        return pulumi.get(self, "volumes_lssd_total_size")


