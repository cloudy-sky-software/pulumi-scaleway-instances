// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.ScalewayInstances.Snapshots
{
    [EnumType]
    public readonly struct ScalewayInstanceV1SnapshotState : IEquatable<ScalewayInstanceV1SnapshotState>
    {
        private readonly string _value;

        private ScalewayInstanceV1SnapshotState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScalewayInstanceV1SnapshotState Available { get; } = new ScalewayInstanceV1SnapshotState("available");
        public static ScalewayInstanceV1SnapshotState Snapshotting { get; } = new ScalewayInstanceV1SnapshotState("snapshotting");
        public static ScalewayInstanceV1SnapshotState Error { get; } = new ScalewayInstanceV1SnapshotState("error");
        public static ScalewayInstanceV1SnapshotState InvalidData { get; } = new ScalewayInstanceV1SnapshotState("invalid_data");
        public static ScalewayInstanceV1SnapshotState Importing { get; } = new ScalewayInstanceV1SnapshotState("importing");
        public static ScalewayInstanceV1SnapshotState Exporting { get; } = new ScalewayInstanceV1SnapshotState("exporting");

        public static bool operator ==(ScalewayInstanceV1SnapshotState left, ScalewayInstanceV1SnapshotState right) => left.Equals(right);
        public static bool operator !=(ScalewayInstanceV1SnapshotState left, ScalewayInstanceV1SnapshotState right) => !left.Equals(right);

        public static explicit operator string(ScalewayInstanceV1SnapshotState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScalewayInstanceV1SnapshotState other && Equals(other);
        public bool Equals(ScalewayInstanceV1SnapshotState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ScalewayInstanceV1SnapshotVolumeType : IEquatable<ScalewayInstanceV1SnapshotVolumeType>
    {
        private readonly string _value;

        private ScalewayInstanceV1SnapshotVolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScalewayInstanceV1SnapshotVolumeType LSsd { get; } = new ScalewayInstanceV1SnapshotVolumeType("l_ssd");
        public static ScalewayInstanceV1SnapshotVolumeType BSsd { get; } = new ScalewayInstanceV1SnapshotVolumeType("b_ssd");
        public static ScalewayInstanceV1SnapshotVolumeType Unified { get; } = new ScalewayInstanceV1SnapshotVolumeType("unified");

        public static bool operator ==(ScalewayInstanceV1SnapshotVolumeType left, ScalewayInstanceV1SnapshotVolumeType right) => left.Equals(right);
        public static bool operator !=(ScalewayInstanceV1SnapshotVolumeType left, ScalewayInstanceV1SnapshotVolumeType right) => !left.Equals(right);

        public static explicit operator string(ScalewayInstanceV1SnapshotVolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScalewayInstanceV1SnapshotVolumeType other && Equals(other);
        public bool Equals(ScalewayInstanceV1SnapshotVolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The task status
    /// </summary>
    [EnumType]
    public readonly struct SnapshotScalewayInstanceV1TaskStatus : IEquatable<SnapshotScalewayInstanceV1TaskStatus>
    {
        private readonly string _value;

        private SnapshotScalewayInstanceV1TaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SnapshotScalewayInstanceV1TaskStatus Pending { get; } = new SnapshotScalewayInstanceV1TaskStatus("pending");
        public static SnapshotScalewayInstanceV1TaskStatus Started { get; } = new SnapshotScalewayInstanceV1TaskStatus("started");
        public static SnapshotScalewayInstanceV1TaskStatus Success { get; } = new SnapshotScalewayInstanceV1TaskStatus("success");
        public static SnapshotScalewayInstanceV1TaskStatus Failure { get; } = new SnapshotScalewayInstanceV1TaskStatus("failure");
        public static SnapshotScalewayInstanceV1TaskStatus Retry { get; } = new SnapshotScalewayInstanceV1TaskStatus("retry");

        public static bool operator ==(SnapshotScalewayInstanceV1TaskStatus left, SnapshotScalewayInstanceV1TaskStatus right) => left.Equals(right);
        public static bool operator !=(SnapshotScalewayInstanceV1TaskStatus left, SnapshotScalewayInstanceV1TaskStatus right) => !left.Equals(right);

        public static explicit operator string(SnapshotScalewayInstanceV1TaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotScalewayInstanceV1TaskStatus other && Equals(other);
        public bool Equals(SnapshotScalewayInstanceV1TaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SnapshotState : IEquatable<SnapshotState>
    {
        private readonly string _value;

        private SnapshotState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SnapshotState Available { get; } = new SnapshotState("available");
        public static SnapshotState Snapshotting { get; } = new SnapshotState("snapshotting");
        public static SnapshotState Error { get; } = new SnapshotState("error");
        public static SnapshotState InvalidData { get; } = new SnapshotState("invalid_data");
        public static SnapshotState Importing { get; } = new SnapshotState("importing");
        public static SnapshotState Exporting { get; } = new SnapshotState("exporting");

        public static bool operator ==(SnapshotState left, SnapshotState right) => left.Equals(right);
        public static bool operator !=(SnapshotState left, SnapshotState right) => !left.Equals(right);

        public static explicit operator string(SnapshotState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotState other && Equals(other);
        public bool Equals(SnapshotState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SnapshotVolumeType : IEquatable<SnapshotVolumeType>
    {
        private readonly string _value;

        private SnapshotVolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SnapshotVolumeType LSsd { get; } = new SnapshotVolumeType("l_ssd");
        public static SnapshotVolumeType BSsd { get; } = new SnapshotVolumeType("b_ssd");
        public static SnapshotVolumeType Unified { get; } = new SnapshotVolumeType("unified");

        public static bool operator ==(SnapshotVolumeType left, SnapshotVolumeType right) => left.Equals(right);
        public static bool operator !=(SnapshotVolumeType left, SnapshotVolumeType right) => !left.Equals(right);

        public static explicit operator string(SnapshotVolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SnapshotVolumeType other && Equals(other);
        public bool Equals(SnapshotVolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
