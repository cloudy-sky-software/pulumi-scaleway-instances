// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.ScalewayInstances.Servers
{
    [ScalewayInstancesResourceType("scaleway-instances:servers:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The boot type to use
        /// </summary>
        [Output("bootType")]
        public Output<Pulumi.ScalewayInstances.Servers.BootType?> BootType { get; private set; } = null!;

        /// <summary>
        /// The bootscript ID to use when `boot_type` is set to `bootscript`
        /// </summary>
        [Output("bootscript")]
        public Output<string?> Bootscript { get; private set; } = null!;

        /// <summary>
        /// Define the server commercial type (i.e. GP1-S)
        /// </summary>
        [Output("commercialType")]
        public Output<string> CommercialType { get; private set; } = null!;

        /// <summary>
        /// Define if a dynamic IP is required for the instance
        /// </summary>
        [Output("dynamicIpRequired")]
        public Output<bool?> DynamicIpRequired { get; private set; } = null!;

        /// <summary>
        /// True if IPv6 is enabled on the server
        /// </summary>
        [Output("enableIpv6")]
        public Output<bool?> EnableIpv6 { get; private set; } = null!;

        /// <summary>
        /// The server image ID
        /// </summary>
        [Output("image")]
        public Output<string?> Image { get; private set; } = null!;

        /// <summary>
        /// The server name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The server organization ID
        /// </summary>
        [Output("organization")]
        public Output<string?> Organization { get; private set; } = null!;

        /// <summary>
        /// Placement group ID if server must be part of a placement group
        /// </summary>
        [Output("placementGroup")]
        public Output<string?> PlacementGroup { get; private set; } = null!;

        /// <summary>
        /// The server project ID
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// The ID of the reserved IP to attach to the server
        /// </summary>
        [Output("publicIp")]
        public Output<string?> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The security group ID
        /// </summary>
        [Output("securityGroup")]
        public Output<string?> SecurityGroup { get; private set; } = null!;

        [Output("server")]
        public Output<Outputs.ScalewayInstanceV1Server?> ServerValue { get; private set; } = null!;

        /// <summary>
        /// The server tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("volumes")]
        public Output<ImmutableDictionary<string, Outputs.ScalewayInstanceV1VolumeServerTemplate>?> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("scaleway-instances:servers:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("scaleway-instances:servers:Server", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-scaleway-instances",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Server(name, id, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The boot type to use
        /// </summary>
        [Input("bootType")]
        public Input<Pulumi.ScalewayInstances.Servers.BootType>? BootType { get; set; }

        /// <summary>
        /// The bootscript ID to use when `boot_type` is set to `bootscript`
        /// </summary>
        [Input("bootscript")]
        public Input<string>? Bootscript { get; set; }

        /// <summary>
        /// Define the server commercial type (i.e. GP1-S)
        /// </summary>
        [Input("commercialType", required: true)]
        public Input<string> CommercialType { get; set; } = null!;

        /// <summary>
        /// Define if a dynamic IP is required for the instance
        /// </summary>
        [Input("dynamicIpRequired")]
        public Input<bool>? DynamicIpRequired { get; set; }

        /// <summary>
        /// True if IPv6 is enabled on the server
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        /// <summary>
        /// The server image ID
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// The server name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The server organization ID
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// Placement group ID if server must be part of a placement group
        /// </summary>
        [Input("placementGroup")]
        public Input<string>? PlacementGroup { get; set; }

        /// <summary>
        /// The server project ID
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The ID of the reserved IP to attach to the server
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The security group ID
        /// </summary>
        [Input("securityGroup")]
        public Input<string>? SecurityGroup { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The server tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("volumes")]
        private InputMap<Inputs.ScalewayInstanceV1VolumeServerTemplateArgs>? _volumes;
        public InputMap<Inputs.ScalewayInstanceV1VolumeServerTemplateArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputMap<Inputs.ScalewayInstanceV1VolumeServerTemplateArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// The zone you want to target
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerArgs()
        {
            BootType = Pulumi.ScalewayInstances.Servers.BootType.Local;
        }
        public static new ServerArgs Empty => new ServerArgs();
    }
}
