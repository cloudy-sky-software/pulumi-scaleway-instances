// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package volumes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Volume struct {
	pulumi.CustomResourceState

	// The volume creation date (RFC 3339 format)
	Creation_date pulumi.StringPtrOutput `pulumi:"creation_date"`
	// Show the volume NBD export URI
	Export_uri pulumi.StringPtrOutput `pulumi:"export_uri"`
	// The volume modification date (RFC 3339 format)
	Modification_date pulumi.StringPtrOutput `pulumi:"modification_date"`
	// The volume name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The volume organization ID
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// The volume project ID
	Project pulumi.StringOutput `pulumi:"project"`
	// The server attached to the volume
	Server ServerPropertiesPtrOutput `pulumi:"server"`
	// The volume disk size (in bytes)
	Size  pulumi.Float64PtrOutput `pulumi:"size"`
	State StatePtrOutput          `pulumi:"state"`
	// The volume tags
	Tags        pulumi.StringArrayOutput `pulumi:"tags"`
	Volume_type VolumeTypePtrOutput      `pulumi:"volume_type"`
	// The zone in which is the volume
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Volume_type == nil {
		args.Volume_type = VolumeType("l_ssd")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("scaleway-instances:volumes:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("scaleway-instances:volumes:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
}

type VolumeState struct {
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// The volume name
	Name *string `pulumi:"name"`
	// The volume organization ID
	Organization *string `pulumi:"organization"`
	// The volume project ID
	Project string `pulumi:"project"`
	// The volume disk size (in bytes)
	Size *float64 `pulumi:"size"`
	// The volume tags
	Tags        []string    `pulumi:"tags"`
	Volume_type *VolumeType `pulumi:"volume_type"`
	// The zone you want to target
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The volume name
	Name pulumi.StringPtrInput
	// The volume organization ID
	Organization pulumi.StringPtrInput
	// The volume project ID
	Project pulumi.StringInput
	// The volume disk size (in bytes)
	Size pulumi.Float64PtrInput
	// The volume tags
	Tags        pulumi.StringArrayInput
	Volume_type VolumeTypePtrInput
	// The zone you want to target
	Zone pulumi.StringPtrInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The volume creation date (RFC 3339 format)
func (o VolumeOutput) Creation_date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Creation_date }).(pulumi.StringPtrOutput)
}

// Show the volume NBD export URI
func (o VolumeOutput) Export_uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Export_uri }).(pulumi.StringPtrOutput)
}

// The volume modification date (RFC 3339 format)
func (o VolumeOutput) Modification_date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Modification_date }).(pulumi.StringPtrOutput)
}

// The volume name
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The volume organization ID
func (o VolumeOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// The volume project ID
func (o VolumeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The server attached to the volume
func (o VolumeOutput) Server() ServerPropertiesPtrOutput {
	return o.ApplyT(func(v *Volume) ServerPropertiesPtrOutput { return v.Server }).(ServerPropertiesPtrOutput)
}

// The volume disk size (in bytes)
func (o VolumeOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.Float64PtrOutput { return v.Size }).(pulumi.Float64PtrOutput)
}

func (o VolumeOutput) State() StatePtrOutput {
	return o.ApplyT(func(v *Volume) StatePtrOutput { return v.State }).(StatePtrOutput)
}

// The volume tags
func (o VolumeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o VolumeOutput) Volume_type() VolumeTypePtrOutput {
	return o.ApplyT(func(v *Volume) VolumeTypePtrOutput { return v.Volume_type }).(VolumeTypePtrOutput)
}

// The zone in which is the volume
func (o VolumeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterOutputType(VolumeOutput{})
}
