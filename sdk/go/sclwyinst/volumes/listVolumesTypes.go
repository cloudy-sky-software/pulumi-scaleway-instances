// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package volumes

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-scaleway-instances/sdk/go/sclwyinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListVolumesTypes(ctx *pulumi.Context, args *ListVolumesTypesArgs, opts ...pulumi.InvokeOption) (*ListVolumesTypesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListVolumesTypesResult
	err := ctx.Invoke("scaleway-instances:volumes:listVolumesTypes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListVolumesTypesArgs struct {
	// The zone you want to target
	Zone string `pulumi:"zone"`
}

type ListVolumesTypesResult struct {
	// Map of volume types
	Volumes map[string]ScalewayInstanceV1VolumeType `pulumi:"volumes"`
}

func ListVolumesTypesOutput(ctx *pulumi.Context, args ListVolumesTypesOutputArgs, opts ...pulumi.InvokeOption) ListVolumesTypesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListVolumesTypesResultOutput, error) {
			args := v.(ListVolumesTypesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ListVolumesTypesResult
			secret, err := ctx.InvokePackageRaw("scaleway-instances:volumes:listVolumesTypes", args, &rv, "", opts...)
			if err != nil {
				return ListVolumesTypesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ListVolumesTypesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ListVolumesTypesResultOutput), nil
			}
			return output, nil
		}).(ListVolumesTypesResultOutput)
}

type ListVolumesTypesOutputArgs struct {
	// The zone you want to target
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (ListVolumesTypesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListVolumesTypesArgs)(nil)).Elem()
}

type ListVolumesTypesResultOutput struct{ *pulumi.OutputState }

func (ListVolumesTypesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListVolumesTypesResult)(nil)).Elem()
}

func (o ListVolumesTypesResultOutput) ToListVolumesTypesResultOutput() ListVolumesTypesResultOutput {
	return o
}

func (o ListVolumesTypesResultOutput) ToListVolumesTypesResultOutputWithContext(ctx context.Context) ListVolumesTypesResultOutput {
	return o
}

// Map of volume types
func (o ListVolumesTypesResultOutput) Volumes() ScalewayInstanceV1VolumeTypeMapOutput {
	return o.ApplyT(func(v ListVolumesTypesResult) map[string]ScalewayInstanceV1VolumeType { return v.Volumes }).(ScalewayInstanceV1VolumeTypeMapOutput)
}

func init() {
	pulumi.RegisterOutputType(ListVolumesTypesResultOutput{})
}
