// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package snapshots

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-scaleway-instances/sdk/go/sclwyinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Snapshot struct {
	pulumi.CustomResourceState

	// The volume on which the snapshot is based on
	BaseVolume BaseVolumePropertiesPtrOutput `pulumi:"baseVolume"`
	// The snapshot creation date (RFC 3339 format)
	CreationDate pulumi.StringPtrOutput `pulumi:"creationDate"`
	// The reason for the failed snapshot import
	ErrorReason pulumi.StringPtrOutput `pulumi:"errorReason"`
	// The snapshot modification date (RFC 3339 format)
	ModificationDate pulumi.StringPtrOutput `pulumi:"modificationDate"`
	// The snapshot name
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The snapshot organization ID
	Organization pulumi.StringPtrOutput `pulumi:"organization"`
	// The snapshot project ID
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// The snapshot size (in bytes)
	Size     pulumi.Float64PtrOutput             `pulumi:"size"`
	Snapshot ScalewayInstanceV1SnapshotPtrOutput `pulumi:"snapshot"`
	State    SnapshotStateEnumPtrOutput          `pulumi:"state"`
	// The snapshot tags
	Tags       pulumi.StringArrayOutput        `pulumi:"tags"`
	Task       ScalewayInstanceV1TaskPtrOutput `pulumi:"task"`
	VolumeType SnapshotVolumeTypePtrOutput     `pulumi:"volumeType"`
	// The snapshot zone
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		args = &SnapshotArgs{}
	}

	if args.State == nil {
		args.State = SnapshotStateEnum("available")
	}
	if args.VolumeType == nil {
		args.VolumeType = SnapshotVolumeType("l_ssd")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("scaleway-instances:snapshots:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("scaleway-instances:snapshots:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
}

type SnapshotState struct {
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The snapshot name
	Name *string `pulumi:"name"`
	// The snapshot organization ID
	Organization *string `pulumi:"organization"`
	// The snapshot project ID
	Project *string `pulumi:"project"`
	// The snapshot size (in bytes)
	Size  *float64           `pulumi:"size"`
	State *SnapshotStateEnum `pulumi:"state"`
	// The snapshot tags
	Tags       []string            `pulumi:"tags"`
	VolumeType *SnapshotVolumeType `pulumi:"volumeType"`
	// The zone you want to target
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The snapshot name
	Name pulumi.StringPtrInput
	// The snapshot organization ID
	Organization pulumi.StringPtrInput
	// The snapshot project ID
	Project pulumi.StringPtrInput
	// The snapshot size (in bytes)
	Size  pulumi.Float64PtrInput
	State SnapshotStateEnumPtrInput
	// The snapshot tags
	Tags       pulumi.StringArrayInput
	VolumeType SnapshotVolumeTypePtrInput
	// The zone you want to target
	Zone pulumi.StringPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The volume on which the snapshot is based on
func (o SnapshotOutput) BaseVolume() BaseVolumePropertiesPtrOutput {
	return o.ApplyT(func(v *Snapshot) BaseVolumePropertiesPtrOutput { return v.BaseVolume }).(BaseVolumePropertiesPtrOutput)
}

// The snapshot creation date (RFC 3339 format)
func (o SnapshotOutput) CreationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.CreationDate }).(pulumi.StringPtrOutput)
}

// The reason for the failed snapshot import
func (o SnapshotOutput) ErrorReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.ErrorReason }).(pulumi.StringPtrOutput)
}

// The snapshot modification date (RFC 3339 format)
func (o SnapshotOutput) ModificationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.ModificationDate }).(pulumi.StringPtrOutput)
}

// The snapshot name
func (o SnapshotOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The snapshot organization ID
func (o SnapshotOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

// The snapshot project ID
func (o SnapshotOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// The snapshot size (in bytes)
func (o SnapshotOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.Float64PtrOutput { return v.Size }).(pulumi.Float64PtrOutput)
}

func (o SnapshotOutput) Snapshot() ScalewayInstanceV1SnapshotPtrOutput {
	return o.ApplyT(func(v *Snapshot) ScalewayInstanceV1SnapshotPtrOutput { return v.Snapshot }).(ScalewayInstanceV1SnapshotPtrOutput)
}

func (o SnapshotOutput) State() SnapshotStateEnumPtrOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotStateEnumPtrOutput { return v.State }).(SnapshotStateEnumPtrOutput)
}

// The snapshot tags
func (o SnapshotOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o SnapshotOutput) Task() ScalewayInstanceV1TaskPtrOutput {
	return o.ApplyT(func(v *Snapshot) ScalewayInstanceV1TaskPtrOutput { return v.Task }).(ScalewayInstanceV1TaskPtrOutput)
}

func (o SnapshotOutput) VolumeType() SnapshotVolumeTypePtrOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotVolumeTypePtrOutput { return v.VolumeType }).(SnapshotVolumeTypePtrOutput)
}

// The snapshot zone
func (o SnapshotOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Zone }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterOutputType(SnapshotOutput{})
}
