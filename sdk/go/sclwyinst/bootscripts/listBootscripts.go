// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bootscripts

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-scaleway-instances/sdk/go/sclwyinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func ListBootscripts(ctx *pulumi.Context, args *ListBootscriptsArgs, opts ...pulumi.InvokeOption) (*ListBootscriptsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListBootscriptsResult
	err := ctx.Invoke("scaleway-instances:bootscripts:listBootscripts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListBootscriptsArgs struct {
	// The zone you want to target
	Zone string `pulumi:"zone"`
}

type ListBootscriptsResult struct {
	Items ScalewayInstanceV1ListBootscriptsResponse `pulumi:"items"`
}

func ListBootscriptsOutput(ctx *pulumi.Context, args ListBootscriptsOutputArgs, opts ...pulumi.InvokeOption) ListBootscriptsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListBootscriptsResult, error) {
			args := v.(ListBootscriptsArgs)
			r, err := ListBootscripts(ctx, &args, opts...)
			var s ListBootscriptsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListBootscriptsResultOutput)
}

type ListBootscriptsOutputArgs struct {
	// The zone you want to target
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (ListBootscriptsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListBootscriptsArgs)(nil)).Elem()
}

type ListBootscriptsResultOutput struct{ *pulumi.OutputState }

func (ListBootscriptsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListBootscriptsResult)(nil)).Elem()
}

func (o ListBootscriptsResultOutput) ToListBootscriptsResultOutput() ListBootscriptsResultOutput {
	return o
}

func (o ListBootscriptsResultOutput) ToListBootscriptsResultOutputWithContext(ctx context.Context) ListBootscriptsResultOutput {
	return o
}

func (o ListBootscriptsResultOutput) ToOutput(ctx context.Context) pulumix.Output[ListBootscriptsResult] {
	return pulumix.Output[ListBootscriptsResult]{
		OutputState: o.OutputState,
	}
}

func (o ListBootscriptsResultOutput) Items() ScalewayInstanceV1ListBootscriptsResponseOutput {
	return o.ApplyT(func(v ListBootscriptsResult) ScalewayInstanceV1ListBootscriptsResponse { return v.Items }).(ScalewayInstanceV1ListBootscriptsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ListBootscriptsResultOutput{})
}
