// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package user_data

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-scaleway-instances/sdk/go/sclwyinst/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListServerUserData(ctx *pulumi.Context, args *ListServerUserDataArgs, opts ...pulumi.InvokeOption) (*ListServerUserDataResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListServerUserDataResult
	err := ctx.Invoke("scaleway-instances:user_data:listServerUserData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListServerUserDataArgs struct {
	// UUID of the server
	ServerId string `pulumi:"serverId"`
	// The zone you want to target
	Zone string `pulumi:"zone"`
}

type ListServerUserDataResult struct {
	UserData []string `pulumi:"userData"`
}

func ListServerUserDataOutput(ctx *pulumi.Context, args ListServerUserDataOutputArgs, opts ...pulumi.InvokeOption) ListServerUserDataResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListServerUserDataResult, error) {
			args := v.(ListServerUserDataArgs)
			r, err := ListServerUserData(ctx, &args, opts...)
			var s ListServerUserDataResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListServerUserDataResultOutput)
}

type ListServerUserDataOutputArgs struct {
	// UUID of the server
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// The zone you want to target
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (ListServerUserDataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListServerUserDataArgs)(nil)).Elem()
}

type ListServerUserDataResultOutput struct{ *pulumi.OutputState }

func (ListServerUserDataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListServerUserDataResult)(nil)).Elem()
}

func (o ListServerUserDataResultOutput) ToListServerUserDataResultOutput() ListServerUserDataResultOutput {
	return o
}

func (o ListServerUserDataResultOutput) ToListServerUserDataResultOutputWithContext(ctx context.Context) ListServerUserDataResultOutput {
	return o
}

func (o ListServerUserDataResultOutput) UserData() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ListServerUserDataResult) []string { return v.UserData }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListServerUserDataResultOutput{})
}
